{"ast":null,"code":"var _jsxFileName = \"/Users/felice/Documents/project-habibi/client/src/components/HomePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { displayPosts, sortPosts } from './functions'; // Adjust the path as necessary\nimport { UsePhredditContext } from \"./phredditContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HomePage() {\n  _s();\n  const {\n    posts,\n    comments\n  } = UsePhredditContext(); // Use useContext to access the values from context \n  //const [loading, setLoading] = useState(true); // For handling loading state\n  const [sortedPosts, setSortedPosts] = useState([]);\n  useEffect(() => {\n    setSortedPosts(posts);\n  }, [posts]);\n  // Fetch posts, communities, and linkflairs from the API\n\n  // const fetchData = async () => {\n  //   try {\n  //     // Fetch posts, communities, and linkflairs concurrently\n  //     const [postsResponse, communitiesResponse, linkFlairsResponse] = await Promise.all([\n  //       fetch('/api/posts'),\n  //       fetch('/api/communities'),\n  //       fetch('/api/linkflairs'),\n  //     ]);\n\n  //     const postsData = await postsResponse.json();\n  //     const communitiesData = await communitiesResponse.json();\n  //     const linkFlairsData = await linkFlairsResponse.json();\n\n  //     setPosts(postsData); // Set posts data\n  //     setCommunities(communitiesData); // Set communities data\n  //     setLinkFlairs(linkFlairsData); // Set link flairs data\n  //     setLoading(false); // Stop loading once data is fetched\n  //   } catch (error) {\n  //     console.error(\"Error fetching data:\", error);\n  //     setLoading(false); // Stop loading even in case of error\n  //   }\n  // };\n\n  //fetchData();\n  //}, []); // Empty dependency array to run once when the component mounts\n\n  // Handle sorting and update posts\n  const handleSort = type => {\n    const sorted = sortPosts(posts, type, comments); // Sort posts based on the selected type\n    setSortedPosts(sorted);\n  };\n\n  // if (loading) {\n  //   return <div>Loading...</div>; // Show loading state while fetching data\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homepage-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"homePage-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-text\",\n        children: \"All Posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"viewPost-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"viewPost-button\",\n          onClick: () => handleSort('newest'),\n          children: \"Newest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"viewPost-button\",\n          onClick: () => handleSort('oldest'),\n          children: \"Oldest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"viewPost-button\",\n          onClick: () => handleSort('active'),\n          children: \"Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [posts.length, \" post(s)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"post-list\",\n      style: {\n        overflowY: 'scroll'\n      },\n      children: displayPosts({\n        showCommunityName: true,\n        posts: sortedPosts\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"cX2t6Lzj38+ZVJek3CCAtdkZrg8=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","displayPosts","sortPosts","UsePhredditContext","jsxDEV","_jsxDEV","HomePage","_s","posts","comments","sortedPosts","setSortedPosts","handleSort","type","sorted","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","id","style","overflowY","showCommunityName","_c","$RefreshReg$"],"sources":["/Users/felice/Documents/project-habibi/client/src/components/HomePage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { displayPosts, sortPosts } from './functions'; // Adjust the path as necessary\nimport { UsePhredditContext } from \"./phredditContext\";\n\n\nexport default function HomePage() {\n  const {posts, comments} = UsePhredditContext() // Use useContext to access the values from context \n  //const [loading, setLoading] = useState(true); // For handling loading state\n  const[sortedPosts, setSortedPosts] = useState([])\n\n  useEffect(() => {\n    setSortedPosts(posts)\n  }, [posts]);\n  // Fetch posts, communities, and linkflairs from the API\n\n    // const fetchData = async () => {\n    //   try {\n    //     // Fetch posts, communities, and linkflairs concurrently\n    //     const [postsResponse, communitiesResponse, linkFlairsResponse] = await Promise.all([\n    //       fetch('/api/posts'),\n    //       fetch('/api/communities'),\n    //       fetch('/api/linkflairs'),\n    //     ]);\n\n    //     const postsData = await postsResponse.json();\n    //     const communitiesData = await communitiesResponse.json();\n    //     const linkFlairsData = await linkFlairsResponse.json();\n\n    //     setPosts(postsData); // Set posts data\n    //     setCommunities(communitiesData); // Set communities data\n    //     setLinkFlairs(linkFlairsData); // Set link flairs data\n    //     setLoading(false); // Stop loading once data is fetched\n    //   } catch (error) {\n    //     console.error(\"Error fetching data:\", error);\n    //     setLoading(false); // Stop loading even in case of error\n    //   }\n    // };\n\n    //fetchData();\n  //}, []); // Empty dependency array to run once when the component mounts\n\n  // Handle sorting and update posts\n  const handleSort = (type) => {\n    const sorted = sortPosts(posts, type, comments); // Sort posts based on the selected type\n    setSortedPosts(sorted);\n  };\n\n\n  // if (loading) {\n  //   return <div>Loading...</div>; // Show loading state while fetching data\n  // }\n\n  return (\n    <div className=\"homepage-container\">\n      <header className=\"homePage-header\">\n        <div className=\"header-text\">All Posts</div>\n        <div className=\"viewPost-buttons\">\n          <button className=\"viewPost-button\" onClick={() => handleSort('newest')}>Newest</button>\n          <button className=\"viewPost-button\" onClick={() => handleSort('oldest')}>Oldest</button>\n          <button className=\"viewPost-button\" onClick={() => handleSort('active')}>Active</button>\n        </div>\n      </header>\n\n      <div>{posts.length} post(s)</div>\n\n      <div id=\"post-list\" style={{ overflowY: 'scroll' }}>\n        {displayPosts({ showCommunityName:true, posts: sortedPosts})}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}