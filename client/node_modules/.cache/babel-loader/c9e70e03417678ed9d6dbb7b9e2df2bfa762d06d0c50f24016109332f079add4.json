{"ast":null,"code":"var _jsxFileName = \"/Users/felice/Documents/project-habibi/client/src/components/phredditContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { fetchPosts, fetchCommunities, fetchComments, fetchLinkFlairs } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PhredditContext = /*#__PURE__*/createContext();\nexport const PhredditProvider = ({\n  children\n}) => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [communities, setCommunities] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [linkflairs, setLinkFlairs] = useState([]);\n  const [currentPage, setCurrentPage] = useState('home');\n  const [currentCommunityID, setCurrentCommunityID] = useState(null);\n  const [currentPostID, setCurrentPostID] = useState(null);\n  const [searchResult, setSearchResult] = useState([]);\n  const [searchString, setSearchString] = useState(\"\");\n\n  // Fetch data once when provider mounts\n  useEffect(() => {\n    const fetchData = async () => {\n      const [postsData, communitiesData, commentsData, linkFlairsData] = await Promise.all([fetchPosts(), fetchCommunities(), fetchComments(), fetchLinkFlairs()]);\n      setPosts(postsData);\n      setCommunities(communitiesData);\n      setComments(commentsData);\n      setLinkFlairs(linkFlairsData);\n      console.log(postsData, communitiesData, commentsData);\n    };\n    fetchData();\n  }, []);\n  const loadPage = (page, communityID = null, postID = null, searchResults = null, searchString = null) => {\n    setCurrentPage(page);\n    if (communityID) setCurrentCommunityID(communityID);\n    if (postID) setCurrentPostID(postID);\n    if (searchString || searchResults) {\n      setSearchString(searchString);\n      setSearchResult(searchResults);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(PhredditContext.Provider, {\n    value: {\n      posts,\n      setPosts,\n      communities,\n      setCommunities,\n      comments,\n      setComments,\n      linkflairs,\n      setLinkFlairs,\n      currentPage,\n      currentCommunityID,\n      currentPostID,\n      searchResult,\n      searchString,\n      loadPage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the context\n_s(PhredditProvider, \"GuR1jIZFxIRW5Y7MCml6ldWRPAw=\");\n_c = PhredditProvider;\nexport const UsePhredditContext = () => {\n  _s2();\n  return useContext(PhredditContext);\n};\n_s2(UsePhredditContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c2 = UsePhredditContext;\nvar _c, _c2;\n$RefreshReg$(_c, \"PhredditProvider\");\n$RefreshReg$(_c2, \"UsePhredditContext\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","fetchPosts","fetchCommunities","fetchComments","fetchLinkFlairs","jsxDEV","_jsxDEV","PhredditContext","PhredditProvider","children","_s","posts","setPosts","communities","setCommunities","comments","setComments","linkflairs","setLinkFlairs","currentPage","setCurrentPage","currentCommunityID","setCurrentCommunityID","currentPostID","setCurrentPostID","searchResult","setSearchResult","searchString","setSearchString","fetchData","postsData","communitiesData","commentsData","linkFlairsData","Promise","all","console","log","loadPage","page","communityID","postID","searchResults","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","UsePhredditContext","_s2","_c2","$RefreshReg$"],"sources":["/Users/felice/Documents/project-habibi/client/src/components/phredditContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { fetchPosts, fetchCommunities, fetchComments, fetchLinkFlairs } from './api';\n\nexport const PhredditContext = createContext();\n\nexport const PhredditProvider = ({ children }) => {\n  const [posts, setPosts] = useState([]);\n  const [communities, setCommunities] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [linkflairs, setLinkFlairs] = useState([]);\n\n  const [currentPage, setCurrentPage] = useState('home');\n  const [currentCommunityID, setCurrentCommunityID] = useState(null); \n  const [currentPostID, setCurrentPostID] = useState(null);\n  const [searchResult, setSearchResult] = useState([]);\n  const [searchString, setSearchString] = useState(\"\");\n\n  // Fetch data once when provider mounts\n  useEffect(() => {\n    const fetchData = async () => {\n      const [postsData, communitiesData, commentsData, linkFlairsData] = await Promise.all([\n        fetchPosts(),\n        fetchCommunities(),\n        fetchComments(),\n        fetchLinkFlairs()\n      ]);\n      setPosts(postsData);\n      setCommunities(communitiesData);\n      setComments(commentsData);\n      setLinkFlairs(linkFlairsData);\n      console.log(postsData, communitiesData, commentsData)\n    };\n    fetchData();\n  }, []);\n\n  const loadPage = (page, communityID = null, postID = null, searchResults = null, searchString = null) => {\n    setCurrentPage(page);\n    \n    if (communityID) setCurrentCommunityID(communityID);\n    if (postID) setCurrentPostID(postID);\n    if (searchString || searchResults) {\n      setSearchString(searchString);\n      setSearchResult(searchResults);\n    }\n  };\n\n  return (\n    <PhredditContext.Provider value={{\n      posts, setPosts, communities, setCommunities, comments, setComments, linkflairs, setLinkFlairs, \n      currentPage, currentCommunityID, currentPostID, \n      searchResult, searchString, loadPage\n    }}>\n      {children}\n    </PhredditContext.Provider>\n  );\n};\n\n// Custom hook to use the context\nexport const UsePhredditContext = () => {\n    return useContext(PhredditContext);\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}