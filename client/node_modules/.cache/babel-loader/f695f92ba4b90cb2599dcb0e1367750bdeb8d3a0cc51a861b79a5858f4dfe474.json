{"ast":null,"code":"var _jsxFileName = \"/Users/felice/Documents/project-habibi/client/src/components/functions.js\";\nimport React from 'react';\nimport { UsePhredditContext } from './phredditContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function displayPosts({\n  showCommunityName = true,\n  posts\n}) {\n  const {\n    communities,\n    comments,\n    linkflairs,\n    loadPage\n  } = UsePhredditContext();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"post-list\",\n    className: \"post-list\",\n    children: posts.map(post => {\n      var _linkflairs$find;\n      const community = communities.find(c => c.postIDs.includes(post._id));\n      const postUser = post.postedBy;\n      const postTime = getTimeDifference(post.postedDate.toLocaleString());\n      const postFlair = ((_linkflairs$find = linkflairs.find(f => f._id === post.linkFlairID)) === null || _linkflairs$find === void 0 ? void 0 : _linkflairs$find.content) || '';\n      const commentCount = calculateCommentCount(post, comments);\n      // console.log(\"Post Comment IDs:\", post.commentIDs);\n      // console.log(\"Comments Array:\", comments);\n      // console.log(commentCount)\n\n      const communityName = showCommunityName ? `${(community === null || community === void 0 ? void 0 : community.name) || 'Unknown Community'} | ` : '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"post-link\",\n          onClick: e => {\n            e.preventDefault();\n            loadPage('post', null, post._id);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-header\",\n              children: [communityName, postUser, \" | \", postTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"post-title\",\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: postFlair\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [post.content.substring(0, 80), \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Views: \", post.views, \" | Comments: \", commentCount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-separator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, post._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\nexport function getTimeDifference(submittedDate) {\n  const now = new Date(); // Current date and time\n  const submitted = new Date(submittedDate); // The date the item was submitted\n\n  const diffInSeconds = Math.floor((now - submitted) / 1000); // Difference in seconds\n\n  // Less than 1 minute (seconds)\n  if (diffInSeconds < 60) {\n    return `${diffInSeconds} seconds ago`;\n  }\n\n  // Less than 1 hour (minutes)\n  const diffInMinutes = Math.floor(diffInSeconds / 60);\n  if (diffInMinutes < 60) {\n    return `${diffInMinutes} minutes ago`;\n  }\n\n  // Less than 24 hours (hours)\n  const diffInHours = Math.floor(diffInMinutes / 60);\n  if (diffInHours < 24) {\n    return `${diffInHours} hours ago`;\n  }\n\n  // Less than 30 days (days)\n  const diffInDays = Math.floor(diffInHours / 24);\n  if (diffInDays < 30) {\n    return `${diffInDays} days ago`;\n  }\n\n  // Less than 12 months (months)\n  const diffInMonths = Math.floor(diffInDays / 30);\n  if (diffInMonths < 12) {\n    return `${diffInMonths} month(s) ago`;\n  }\n\n  // More than 1 year (years)\n  const diffInYears = Math.floor(diffInMonths / 12);\n  return `${diffInYears} year(s) ago`;\n}\n\n// sortPosts.js\nexport function sortPosts(posts, type, comments) {\n  let sortedPosts = [];\n  switch (type) {\n    case 'newest':\n      sortedPosts = [...posts].sort((a, b) => new Date(b.postedDate) - new Date(a.postedDate));\n      break;\n    case 'oldest':\n      sortedPosts = [...posts].sort((a, b) => new Date(a.postedDate) - new Date(b.postedDate));\n      break;\n    case 'active':\n      // Sort by the latest comment date (including replies)\n      sortedPosts = [...posts].sort((a, b) => {\n        const latestCommentA = Math.max(...a.commentIDs.map(commentID => getLatestCommentDate(commentID, comments)));\n        const latestCommentB = Math.max(...b.commentIDs.map(commentID => getLatestCommentDate(commentID, comments)));\n        return latestCommentB - latestCommentA; // Sort descending\n      });\n      break;\n    default:\n      sortedPosts = posts;\n  }\n  return sortedPosts;\n}\n\n// Helper function to recursively find the latest comment date (including replies)\nexport function getLatestCommentDate(commentID, comments) {\n  const comment = comments.find(c => c._id === commentID);\n\n  // Get the latest date of the current comment\n  let latestDate = new Date(comment.commentedDate).getTime();\n\n  // Recursively check all replies to this comment (if any) and update the latest date\n  comment.commentIDs.forEach(replyID => {\n    const replyDate = getLatestCommentDate(replyID, comments); // Recursive call for replies\n    if (replyDate > latestDate) {\n      latestDate = replyDate;\n    }\n  });\n  return latestDate;\n}\nexport function calculateCommentCount(post, comments) {\n  // Helper function to count comments recursively\n  //console.log(\"POST\", post)\n  // console.log(\"comments: \", comments)\n  const countReplies = commentIDs => {\n    let totalCount = 0;\n    commentIDs.forEach(id => {\n      const comment = comments.find(c => c._id === id);\n      //console.log(\"found comment:\", comment)\n      if (comment) {\n        totalCount += 1 + countReplies(comment.commentIDs);\n      }\n    });\n    return totalCount;\n  };\n  return countReplies(post.commentIDs);\n}","map":{"version":3,"names":["React","UsePhredditContext","jsxDEV","_jsxDEV","displayPosts","showCommunityName","posts","communities","comments","linkflairs","loadPage","class","className","children","map","post","_linkflairs$find","community","find","c","postIDs","includes","_id","postUser","postedBy","postTime","getTimeDifference","postedDate","toLocaleString","postFlair","f","linkFlairID","content","commentCount","calculateCommentCount","communityName","name","href","onClick","e","preventDefault","fileName","_jsxFileName","lineNumber","columnNumber","title","substring","views","submittedDate","now","Date","submitted","diffInSeconds","Math","floor","diffInMinutes","diffInHours","diffInDays","diffInMonths","diffInYears","sortPosts","type","sortedPosts","sort","a","b","latestCommentA","max","commentIDs","commentID","getLatestCommentDate","latestCommentB","comment","latestDate","commentedDate","getTime","forEach","replyID","replyDate","countReplies","totalCount","id"],"sources":["/Users/felice/Documents/project-habibi/client/src/components/functions.js"],"sourcesContent":["\nimport React from 'react';\nimport { UsePhredditContext } from './phredditContext';\n\n\n\nexport function displayPosts({ showCommunityName = true, posts}) {\n  const {communities, comments, linkflairs, loadPage } = UsePhredditContext();\n  return (\n    <div class=\"post-list\" className = \"post-list\">\n      {posts.map(post => {\n        const community = communities.find(c => c.postIDs.includes(post._id));\n        const postUser = post.postedBy;\n        const postTime = getTimeDifference(post.postedDate.toLocaleString());\n        const postFlair = linkflairs.find(f => f._id === post.linkFlairID)?.content || '';\n        const commentCount = calculateCommentCount(post, comments);\n        // console.log(\"Post Comment IDs:\", post.commentIDs);\n        // console.log(\"Comments Array:\", comments);\n        // console.log(commentCount)\n\n        const communityName = showCommunityName ? `${community?.name || 'Unknown Community'} | ` : '';\n\n        return (\n          <div key={post._id} className=\"post-wrapper\">\n            <a\n              href=\"#\"\n              className=\"post-link\"\n              onClick={e => {\n                e.preventDefault();\n                loadPage('post', null, post._id); \n              }}\n            >\n              <div>\n                <div className=\"post-header\">{communityName}{postUser} | {postTime}</div>\n                <h2 className=\"post-title\">{post.title}</h2>\n                <p>{postFlair}</p>\n                <p>{post.content.substring(0, 80)}...</p>\n                <div>Views: {post.views} | Comments: {commentCount}</div>\n              </div>\n            </a>\n            <div className=\"post-separator\"></div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport function getTimeDifference(submittedDate) {\n    const now = new Date();  // Current date and time\n    const submitted = new Date(submittedDate);  // The date the item was submitted\n    \n    const diffInSeconds = Math.floor((now - submitted) / 1000);  // Difference in seconds\n    \n    // Less than 1 minute (seconds)\n    if (diffInSeconds < 60) {\n      return `${diffInSeconds} seconds ago`;\n    }\n  \n    // Less than 1 hour (minutes)\n    const diffInMinutes = Math.floor(diffInSeconds / 60);\n    if (diffInMinutes < 60) {\n      return `${diffInMinutes} minutes ago`;\n    }\n  \n    // Less than 24 hours (hours)\n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) {\n      return `${diffInHours} hours ago`;\n    }\n  \n    // Less than 30 days (days)\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 30) {\n      return `${diffInDays} days ago`;\n    }\n  \n    // Less than 12 months (months)\n    const diffInMonths = Math.floor(diffInDays / 30);\n    if (diffInMonths < 12) {\n      return `${diffInMonths} month(s) ago`;\n    }\n  \n    // More than 1 year (years)\n    const diffInYears = Math.floor(diffInMonths / 12);\n    return `${diffInYears} year(s) ago`;\n  }\n\n  // sortPosts.js\nexport function sortPosts(posts, type, comments) {\n    let sortedPosts = [];\n    switch (type) {\n      case 'newest':\n        sortedPosts = [...posts].sort((a, b) => new Date(b.postedDate) - new Date(a.postedDate));\n        break;\n      case 'oldest':\n        sortedPosts = [...posts].sort((a, b) => new Date(a.postedDate) - new Date(b.postedDate));\n        break;\n        case 'active':\n          // Sort by the latest comment date (including replies)\n          sortedPosts = [...posts].sort((a, b) => {\n              const latestCommentA = Math.max(...a.commentIDs.map(commentID => getLatestCommentDate(commentID, comments)));\n              const latestCommentB = Math.max(...b.commentIDs.map(commentID => getLatestCommentDate(commentID, comments)));\n              return latestCommentB - latestCommentA; // Sort descending\n          });\n          break;\n      default:\n        sortedPosts = posts;\n    }\n    return sortedPosts;\n  }\n  \n  // Helper function to recursively find the latest comment date (including replies)\nexport function getLatestCommentDate(commentID, comments) {\n  const comment = comments.find(c => c._id === commentID);\n\n  // Get the latest date of the current comment\n  let latestDate = new Date(comment.commentedDate).getTime();\n\n  // Recursively check all replies to this comment (if any) and update the latest date\n  comment.commentIDs.forEach(replyID => {\n      const replyDate = getLatestCommentDate(replyID, comments); // Recursive call for replies\n      if (replyDate > latestDate) {\n          latestDate = replyDate;\n      }\n  });\n\n  return latestDate;\n}\n\n  export function calculateCommentCount(post, comments) {\n    // Helper function to count comments recursively\n    //console.log(\"POST\", post)\n    // console.log(\"comments: \", comments)\n    const countReplies = (commentIDs) => { \n      let totalCount = 0;\n      commentIDs.forEach(id => {\n        const comment = comments.find(c => c._id === id);\n        //console.log(\"found comment:\", comment)\n        if (comment) { totalCount += 1 + countReplies(comment.commentIDs); }\n      });\n      return totalCount;\n    };\n    return countReplies(post.commentIDs);\n  }\n\n"],"mappings":";AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,kBAAkB,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIvD,OAAO,SAASC,YAAYA,CAAC;EAAEC,iBAAiB,GAAG,IAAI;EAAEC;AAAK,CAAC,EAAE;EAC/D,MAAM;IAACC,WAAW;IAAEC,QAAQ;IAAEC,UAAU;IAAEC;EAAS,CAAC,GAAGT,kBAAkB,CAAC,CAAC;EAC3E,oBACEE,OAAA;IAAKQ,KAAK,EAAC,WAAW;IAACC,SAAS,EAAG,WAAW;IAAAC,QAAA,EAC3CP,KAAK,CAACQ,GAAG,CAACC,IAAI,IAAI;MAAA,IAAAC,gBAAA;MACjB,MAAMC,SAAS,GAAGV,WAAW,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAACC,QAAQ,CAACN,IAAI,CAACO,GAAG,CAAC,CAAC;MACrE,MAAMC,QAAQ,GAAGR,IAAI,CAACS,QAAQ;MAC9B,MAAMC,QAAQ,GAAGC,iBAAiB,CAACX,IAAI,CAACY,UAAU,CAACC,cAAc,CAAC,CAAC,CAAC;MACpE,MAAMC,SAAS,GAAG,EAAAb,gBAAA,GAAAP,UAAU,CAACS,IAAI,CAACY,CAAC,IAAIA,CAAC,CAACR,GAAG,KAAKP,IAAI,CAACgB,WAAW,CAAC,cAAAf,gBAAA,uBAAhDA,gBAAA,CAAkDgB,OAAO,KAAI,EAAE;MACjF,MAAMC,YAAY,GAAGC,qBAAqB,CAACnB,IAAI,EAAEP,QAAQ,CAAC;MAC1D;MACA;MACA;;MAEA,MAAM2B,aAAa,GAAG9B,iBAAiB,GAAG,GAAG,CAAAY,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEmB,IAAI,KAAI,mBAAmB,KAAK,GAAG,EAAE;MAE7F,oBACEjC,OAAA;QAAoBS,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC1CV,OAAA;UACEkC,IAAI,EAAC,GAAG;UACRzB,SAAS,EAAC,WAAW;UACrB0B,OAAO,EAAEC,CAAC,IAAI;YACZA,CAAC,CAACC,cAAc,CAAC,CAAC;YAClB9B,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAEK,IAAI,CAACO,GAAG,CAAC;UAClC,CAAE;UAAAT,QAAA,eAEFV,OAAA;YAAAU,QAAA,gBACEV,OAAA;cAAKS,SAAS,EAAC,aAAa;cAAAC,QAAA,GAAEsB,aAAa,EAAEZ,QAAQ,EAAC,KAAG,EAACE,QAAQ;YAAA;cAAAgB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACzEzC,OAAA;cAAIS,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAEE,IAAI,CAAC8B;YAAK;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC5CzC,OAAA;cAAAU,QAAA,EAAIgB;YAAS;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAClBzC,OAAA;cAAAU,QAAA,GAAIE,IAAI,CAACiB,OAAO,CAACc,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAC,KAAG;YAAA;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,eACzCzC,OAAA;cAAAU,QAAA,GAAK,SAAO,EAACE,IAAI,CAACgC,KAAK,EAAC,eAAa,EAACd,YAAY;YAAA;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACJzC,OAAA;UAAKS,SAAS,EAAC;QAAgB;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,GAjB9B7B,IAAI,CAACO,GAAG;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAkBb,CAAC;IAEV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAEA,OAAO,SAASlB,iBAAiBA,CAACsB,aAAa,EAAE;EAC7C,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC,CAAE;EACzB,MAAMC,SAAS,GAAG,IAAID,IAAI,CAACF,aAAa,CAAC,CAAC,CAAE;;EAE5C,MAAMI,aAAa,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACL,GAAG,GAAGE,SAAS,IAAI,IAAI,CAAC,CAAC,CAAE;;EAE7D;EACA,IAAIC,aAAa,GAAG,EAAE,EAAE;IACtB,OAAO,GAAGA,aAAa,cAAc;EACvC;;EAEA;EACA,MAAMG,aAAa,GAAGF,IAAI,CAACC,KAAK,CAACF,aAAa,GAAG,EAAE,CAAC;EACpD,IAAIG,aAAa,GAAG,EAAE,EAAE;IACtB,OAAO,GAAGA,aAAa,cAAc;EACvC;;EAEA;EACA,MAAMC,WAAW,GAAGH,IAAI,CAACC,KAAK,CAACC,aAAa,GAAG,EAAE,CAAC;EAClD,IAAIC,WAAW,GAAG,EAAE,EAAE;IACpB,OAAO,GAAGA,WAAW,YAAY;EACnC;;EAEA;EACA,MAAMC,UAAU,GAAGJ,IAAI,CAACC,KAAK,CAACE,WAAW,GAAG,EAAE,CAAC;EAC/C,IAAIC,UAAU,GAAG,EAAE,EAAE;IACnB,OAAO,GAAGA,UAAU,WAAW;EACjC;;EAEA;EACA,MAAMC,YAAY,GAAGL,IAAI,CAACC,KAAK,CAACG,UAAU,GAAG,EAAE,CAAC;EAChD,IAAIC,YAAY,GAAG,EAAE,EAAE;IACrB,OAAO,GAAGA,YAAY,eAAe;EACvC;;EAEA;EACA,MAAMC,WAAW,GAAGN,IAAI,CAACC,KAAK,CAACI,YAAY,GAAG,EAAE,CAAC;EACjD,OAAO,GAAGC,WAAW,cAAc;AACrC;;AAEA;AACF,OAAO,SAASC,SAASA,CAACtD,KAAK,EAAEuD,IAAI,EAAErD,QAAQ,EAAE;EAC7C,IAAIsD,WAAW,GAAG,EAAE;EACpB,QAAQD,IAAI;IACV,KAAK,QAAQ;MACXC,WAAW,GAAG,CAAC,GAAGxD,KAAK,CAAC,CAACyD,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIf,IAAI,CAACe,CAAC,CAACtC,UAAU,CAAC,GAAG,IAAIuB,IAAI,CAACc,CAAC,CAACrC,UAAU,CAAC,CAAC;MACxF;IACF,KAAK,QAAQ;MACXmC,WAAW,GAAG,CAAC,GAAGxD,KAAK,CAAC,CAACyD,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIf,IAAI,CAACc,CAAC,CAACrC,UAAU,CAAC,GAAG,IAAIuB,IAAI,CAACe,CAAC,CAACtC,UAAU,CAAC,CAAC;MACxF;IACA,KAAK,QAAQ;MACX;MACAmC,WAAW,GAAG,CAAC,GAAGxD,KAAK,CAAC,CAACyD,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACpC,MAAMC,cAAc,GAAGb,IAAI,CAACc,GAAG,CAAC,GAAGH,CAAC,CAACI,UAAU,CAACtD,GAAG,CAACuD,SAAS,IAAIC,oBAAoB,CAACD,SAAS,EAAE7D,QAAQ,CAAC,CAAC,CAAC;QAC5G,MAAM+D,cAAc,GAAGlB,IAAI,CAACc,GAAG,CAAC,GAAGF,CAAC,CAACG,UAAU,CAACtD,GAAG,CAACuD,SAAS,IAAIC,oBAAoB,CAACD,SAAS,EAAE7D,QAAQ,CAAC,CAAC,CAAC;QAC5G,OAAO+D,cAAc,GAAGL,cAAc,CAAC,CAAC;MAC5C,CAAC,CAAC;MACF;IACJ;MACEJ,WAAW,GAAGxD,KAAK;EACvB;EACA,OAAOwD,WAAW;AACpB;;AAEA;AACF,OAAO,SAASQ,oBAAoBA,CAACD,SAAS,EAAE7D,QAAQ,EAAE;EACxD,MAAMgE,OAAO,GAAGhE,QAAQ,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACG,GAAG,KAAK+C,SAAS,CAAC;;EAEvD;EACA,IAAII,UAAU,GAAG,IAAIvB,IAAI,CAACsB,OAAO,CAACE,aAAa,CAAC,CAACC,OAAO,CAAC,CAAC;;EAE1D;EACAH,OAAO,CAACJ,UAAU,CAACQ,OAAO,CAACC,OAAO,IAAI;IAClC,MAAMC,SAAS,GAAGR,oBAAoB,CAACO,OAAO,EAAErE,QAAQ,CAAC,CAAC,CAAC;IAC3D,IAAIsE,SAAS,GAAGL,UAAU,EAAE;MACxBA,UAAU,GAAGK,SAAS;IAC1B;EACJ,CAAC,CAAC;EAEF,OAAOL,UAAU;AACnB;AAEE,OAAO,SAASvC,qBAAqBA,CAACnB,IAAI,EAAEP,QAAQ,EAAE;EACpD;EACA;EACA;EACA,MAAMuE,YAAY,GAAIX,UAAU,IAAK;IACnC,IAAIY,UAAU,GAAG,CAAC;IAClBZ,UAAU,CAACQ,OAAO,CAACK,EAAE,IAAI;MACvB,MAAMT,OAAO,GAAGhE,QAAQ,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACG,GAAG,KAAK2D,EAAE,CAAC;MAChD;MACA,IAAIT,OAAO,EAAE;QAAEQ,UAAU,IAAI,CAAC,GAAGD,YAAY,CAACP,OAAO,CAACJ,UAAU,CAAC;MAAE;IACrE,CAAC,CAAC;IACF,OAAOY,UAAU;EACnB,CAAC;EACD,OAAOD,YAAY,CAAChE,IAAI,CAACqD,UAAU,CAAC;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}