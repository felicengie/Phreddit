{"ast":null,"code":"var _jsxFileName = \"/Users/felice/Documents/project-habibi/client/src/components/searchBar.jsx\",\n  _s = $RefreshSig$();\n// SearchBar.js\nimport React, { useState } from 'react';\nimport { UsePhredditContext } from './phredditContext';\nimport '../stylesheets/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = () => {\n  _s();\n  const {\n    comments,\n    posts,\n    loadPage\n  } = UsePhredditContext();\n  const [searchString, setSearchString] = useState('');\n\n  // Recursive function to search comments\n  const searchComments = (commentID, searchTerms) => {\n    const comment = comments.find(c => c._id === commentID);\n    if (!comment) return false;\n\n    // Check if the current comment matches any search term\n    const commentMatches = searchTerms.some(term => comment.content.toLowerCase().includes(term.toLowerCase()));\n\n    // Recursively check replies for matches\n    const replyMatches = comment.commentIDs.some(replyID => searchComments(replyID, searchTerms));\n    return commentMatches || replyMatches;\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      const trimmedSearchString = searchString.trim();\n      const searchTerms = trimmedSearchString.split(' ').filter(term => term !== '');\n\n      // Perform the search on posts\n      const searchedPosts = posts.filter(post => {\n        // Check if any search term matches the post title or content\n        const postMatches = searchTerms.some(term => post.title.toLowerCase().includes(term.toLowerCase()) || post.content.toLowerCase().includes(term.toLowerCase()));\n\n        // Check through comments using the recursive search function\n        const commentMatches = post.commentIDs.some(commentID => searchComments(commentID, searchTerms));\n\n        // Return true if either the post (title or content) or any comment matches the search terms\n        return postMatches || commentMatches;\n      });\n      console.log(\"Search results: \", searchedPosts);\n      // Call displayPosts with the search results\n      loadPage(\"searchResults\", null, null, searchedPosts, searchString);\n      setSearchString(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-bar-container\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"search-bar\",\n      type: \"text\",\n      placeholder: \"Search...\",\n      value: searchString,\n      onChange: e => setSearchString(e.target.value),\n      onKeyDown: handleKeyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchBar, \"PmxOCRHk0izsRiRmDCHMYiqi/hI=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","UsePhredditContext","jsxDEV","_jsxDEV","SearchBar","_s","comments","posts","loadPage","searchString","setSearchString","searchComments","commentID","searchTerms","comment","find","c","_id","commentMatches","some","term","content","toLowerCase","includes","replyMatches","commentIDs","replyID","handleKeyPress","e","key","trimmedSearchString","trim","split","filter","searchedPosts","post","postMatches","title","console","log","className","children","type","placeholder","value","onChange","target","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/felice/Documents/project-habibi/client/src/components/searchBar.jsx"],"sourcesContent":["// SearchBar.js\nimport React, { useState } from 'react';\nimport { UsePhredditContext } from './phredditContext';\nimport '../stylesheets/index.css';\n\nconst SearchBar = () => {\n    const {comments,posts, loadPage} = UsePhredditContext()\n    const [searchString, setSearchString] = useState('');\n\n     // Recursive function to search comments\n     const searchComments = (commentID, searchTerms) => {\n        const comment = comments.find(c => c._id === commentID);\n        if (!comment) return false;\n\n        // Check if the current comment matches any search term\n        const commentMatches = searchTerms.some(term =>\n            comment.content.toLowerCase().includes(term.toLowerCase())\n        );\n\n        // Recursively check replies for matches\n        const replyMatches = comment.commentIDs.some(replyID =>\n            searchComments(replyID, searchTerms)\n        );\n\n        return commentMatches || replyMatches;\n    };\n\n    const handleKeyPress = (e) => {\n\n        if (e.key === 'Enter') {\n            const trimmedSearchString = searchString.trim();\n            const searchTerms = trimmedSearchString.split(' ').filter(term => term !== '');\n            \n           // Perform the search on posts\n            const searchedPosts = posts.filter(post => {\n                // Check if any search term matches the post title or content\n                const postMatches = searchTerms.some(term =>\n                    post.title.toLowerCase().includes(term.toLowerCase()) ||\n                    post.content.toLowerCase().includes(term.toLowerCase())\n                );\n\n                // Check through comments using the recursive search function\n                const commentMatches = post.commentIDs.some(commentID =>\n                    searchComments(commentID, searchTerms)\n                );\n\n                // Return true if either the post (title or content) or any comment matches the search terms\n                return postMatches || commentMatches;\n            });\n\n            console.log(\"Search results: \", searchedPosts)\n            // Call displayPosts with the search results\n            loadPage(\"searchResults\",null, null, searchedPosts, searchString)\n\n            setSearchString(\"\")\n        }\n    };\n\n\n    return (\n        <div className=\"search-bar-container\">\n            <input\n                className=\"search-bar\"\n                type=\"text\"\n                placeholder=\"Search...\"\n                value={searchString}\n                onChange={(e) => setSearchString(e.target.value)}\n                onKeyDown={handleKeyPress}\n            />\n        </div>\n    );\n};\n\nexport default SearchBar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}