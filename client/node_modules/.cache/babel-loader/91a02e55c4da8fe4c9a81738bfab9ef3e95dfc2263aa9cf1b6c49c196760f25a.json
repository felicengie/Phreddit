{"ast":null,"code":"var _jsxFileName = \"/Users/felice/Documents/project-habibi/client/src/components/NewCommunityPage/CreateCommunity.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../../stylesheets/index.css';\nimport { UsePhredditContext } from '../phredditContext';\nimport { createCommunity, updateCommunity, deleteComment, deletePost, fetchPost, fetchComment, deleteCommunity } from '../api';\nimport { usePostDeletion } from '../functions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewCommunityPage = () => {\n  _s();\n  const {\n    deletePosts\n  } = usePostDeletion();\n  const {\n    loadPage,\n    communities,\n    setCommunities,\n    user,\n    selectedCommunity,\n    setSelectedCommunity,\n    setComments,\n    posts,\n    setPosts,\n    comments\n  } = UsePhredditContext();\n  const [communityName, setCommunityName] = useState('');\n  const [communityDescription, setCommunityDescription] = useState('');\n  const [errors, setErrors] = useState({\n    name: '',\n    description: ''\n  });\n  const [showConfirmation, setShowConfirmation] = useState(false); // To control the visibility of the confirmation popup\n\n  useEffect(() => {\n    // If there's a selected community, populate the form with its data\n    if (selectedCommunity) {\n      setCommunityName(selectedCommunity.name);\n      setCommunityDescription(selectedCommunity.description);\n    }\n  }, [selectedCommunity]);\n  const handleCreateCommunity = async event => {\n    event.preventDefault();\n    let isValid = true;\n    const newErrors = {\n      name: '',\n      description: ''\n    };\n\n    // Validate inputs\n    if (!communityName.trim()) {\n      newErrors.name = 'Community name is required.';\n      isValid = false;\n    }\n    if (!communityDescription.trim()) {\n      newErrors.description = 'Description is required.';\n      isValid = false;\n    }\n\n    // Check for duplicate community names\n    const isDuplicate = communities.some(community => community.name.toLowerCase() === communityName.toLowerCase());\n    if (isValid && isDuplicate && !selectedCommunity) {\n      newErrors.name = 'A community with this name already exists. Please choose a different name.';\n      isValid = false;\n    }\n\n    // Update errors state\n    setErrors(newErrors);\n\n    // If valid, create or update the community\n    if (isValid) {\n      const communityData = {\n        name: communityName,\n        description: communityDescription,\n        postIDs: selectedCommunity ? selectedCommunity.postIDs : [],\n        startDate: selectedCommunity ? selectedCommunity.startDate : new Date(),\n        members: selectedCommunity ? selectedCommunity.members : [user.displayName],\n        createdBy: selectedCommunity ? selectedCommunity.createdBy : user.displayName\n      };\n      let createdCommunity;\n      try {\n        if (selectedCommunity) {\n          // Update the selected community\n          const updatedCommunity = await updateCommunity(selectedCommunity._id, communityData);\n          setCommunities(prev => prev.map(community => community._id === updatedCommunity._id ? updatedCommunity : community));\n          setSelectedCommunity(null); // Clear the selected community after update\n        } else {\n          // Create a new community\n          createdCommunity = await createCommunity(communityData);\n          setCommunities(prev => [...prev, createdCommunity]);\n        }\n\n        // Navigate to the community page\n        loadPage('community', selectedCommunity ? selectedCommunity._id : createdCommunity._id);\n\n        // Reset form fields\n        setCommunityName('');\n        setCommunityDescription('');\n        setErrors({\n          name: '',\n          description: ''\n        });\n      } catch (error) {\n        // Handle error (e.g., show a notification or log it)\n        console.error('Error creating/updating community:', error);\n      }\n    }\n  };\n\n  // const deleteCommentsRecursively = async (comment) => {\n  //     console.log(comment)\n  //     try {\n  //       // If the comment has replies (commentIDs), recursively delete those first\n  //       if (comment.commentIDs && comment.commentIDs.length > 0) {\n  //         for (const replyId of comment.commentIDs) {\n  //           const reply = comments.find((r) => r._id === replyId);\n  //           await deleteCommentsRecursively(reply); // Recursively delete each reply\n  //         }\n  //       }\n\n  //       // Now that all replies are deleted, delete the current comment\n  //       await deleteComment(comment._id);\n  //       console.log(`Deleted comment with ID: ${comment._id}`);\n\n  //       // Optionally, remove the deleted comment from the state to update the UI\n  //       // This assumes you have a state like 'comments' where you store the comments list\n  //       setComments((prevComments) =>\n  //         prevComments.filter((c) => c._id !== comment._id)\n  //       );\n  //       console.log(`comments array: ${comments}`);\n\n  //     } catch (error) {\n  //       console.error('Error deleting comment:', error);\n  //     }\n  //   };\n\n  //   const deletePosts = async (postIDs) => {\n  //     try {\n  //         for (const postID of postIDs) {\n  //           console.log(`Deleting post with ID: ${postID}`);\n\n  //           const post = await fetchPost(postID);\n  //           if (!post) {\n  //             console.warn(`Post with ID: ${postID} not found or already deleted.`);\n  //             return;\n  //           }\n\n  //           console.log(`Post with ID: ${postID} fetched successfully.`);\n\n  //           // Step 2: Fetch and recursively delete associated comments\n  //             if (post.commentIDs && post.commentIDs.length > 0) {\n  //                 console.log(`Processing ${post.commentIDs.length} comments associated with the post.`);\n  //                 for (const commentID of post.commentIDs) {\n  //                 console.log(\"CommentID: \", commentID)\n  //                 const comment = await fetchComment(commentID);\n  //                 if (comment) {\n  //                     await deleteCommentsRecursively(comment); // Call the recursive function directly\n  //                 }\n  //                 }\n  //             }\n  //           // Call the API to delete the post\n  //             await deletePost(postID); // Ensure `deletePost` is implemented to make an API request\n  //             // Update the state to remove the deleted post\n  //             setPosts((prevPosts) =>\n  //                 prevPosts.filter((p) => p._id !== postID)\n  //             );\n  //             console.log(`Post with ID: ${postID} deleted successfully.`);\n  //         }\n  //         console.log(\"All posts in the community have been deleted.\");\n  //         console.log(\"posts array now: \", posts)\n\n  //     } catch (error) {\n  //         console.error(\"Error deleting posts:\", error);\n  //     }\n  //   }\n\n  // Function to handle deletion\n  const handleDeleteCommunity = async () => {\n    try {\n      // Call API to delete the community\n      deletePosts(selectedCommunity.postIDs);\n      await deleteCommunity(selectedCommunity._id); // Assuming selectedCommunity._id is the community's unique ID\n      // Remove the community from the state\n      setCommunities(prev => prev.filter(community => community._id !== selectedCommunity._id));\n      // Reset the selected community state\n      setSelectedCommunity(null);\n      setShowConfirmation(false); // Close the confirmation popup\n      loadPage(\"userProfile\");\n    } catch (error) {\n      console.error('Error deleting community:', error);\n      // You can show an error message here if needed\n    }\n  };\n  const showConfirm = e => {\n    e.preventDefault();\n    console.log(\"show\");\n    setShowConfirmation(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tell us about your community\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"A name and description help people understand what your community is all about.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCreateCommunity,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"community-name\",\n          children: [\"Community Name \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'red'\n            },\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 68\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"community-name\",\n          value: communityName,\n          onChange: e => setCommunityName(e.target.value),\n          maxLength: 100\n          // required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"character-counter\",\n          children: [communityName.length, \"/100\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), errors.name && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: errors.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"community-description\",\n          children: [\"Description \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'red'\n            },\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 72\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"community-description\",\n          value: communityDescription,\n          onChange: e => setCommunityDescription(e.target.value),\n          maxLength: 500\n          // required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"character-counter\",\n          children: [communityDescription.length, \"/500\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 22\n        }, this), errors.description && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: errors.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: selectedCommunity ? 'Update Community' : 'Create Community'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"delete-button\",\n        onClick: e => showConfirm(e),\n        hidden: !selectedCommunity,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), showConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-popup\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Are you sure you want to delete this community?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This action cannot be undone.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDeleteCommunity,\n          children: \"Yes, delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowConfirmation(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n};\n_s(NewCommunityPage, \"oB3ATtdpsMr2Z4tUkZ3yhVYS0BE=\", false, function () {\n  return [usePostDeletion];\n});\n_c = NewCommunityPage;\nexport default NewCommunityPage;\nvar _c;\n$RefreshReg$(_c, \"NewCommunityPage\");","map":{"version":3,"names":["React","useState","useEffect","UsePhredditContext","createCommunity","updateCommunity","deleteComment","deletePost","fetchPost","fetchComment","deleteCommunity","usePostDeletion","jsxDEV","_jsxDEV","NewCommunityPage","_s","deletePosts","loadPage","communities","setCommunities","user","selectedCommunity","setSelectedCommunity","setComments","posts","setPosts","comments","communityName","setCommunityName","communityDescription","setCommunityDescription","errors","setErrors","name","description","showConfirmation","setShowConfirmation","handleCreateCommunity","event","preventDefault","isValid","newErrors","trim","isDuplicate","some","community","toLowerCase","communityData","postIDs","startDate","Date","members","displayName","createdBy","createdCommunity","updatedCommunity","_id","prev","map","error","console","handleDeleteCommunity","filter","showConfirm","e","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","style","color","type","id","value","onChange","target","maxLength","className","length","onClick","hidden","_c","$RefreshReg$"],"sources":["/Users/felice/Documents/project-habibi/client/src/components/NewCommunityPage/CreateCommunity.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../../stylesheets/index.css';\nimport { UsePhredditContext } from '../phredditContext';\nimport { createCommunity, updateCommunity, deleteComment, deletePost, fetchPost, fetchComment, deleteCommunity } from '../api';\nimport {usePostDeletion} from '../functions';\n\nconst NewCommunityPage = () => {\n    const { deletePosts } = usePostDeletion();\n    const {loadPage, communities, setCommunities, user, selectedCommunity, setSelectedCommunity, setComments, posts, setPosts, comments} = UsePhredditContext();\n    const [communityName, setCommunityName] = useState('');\n    const [communityDescription, setCommunityDescription] = useState('');\n    const [errors, setErrors] = useState({ name: '', description: '' });\n    const [showConfirmation, setShowConfirmation] = useState(false); // To control the visibility of the confirmation popup\n\n    useEffect(() => {\n        // If there's a selected community, populate the form with its data\n        if (selectedCommunity) {\n            setCommunityName(selectedCommunity.name);\n            setCommunityDescription(selectedCommunity.description);\n        }\n    }, [selectedCommunity]);\n\n    const handleCreateCommunity = async (event) => {\n        event.preventDefault();\n        let isValid = true;\n        const newErrors = { name: '', description: ''};\n\n        // Validate inputs\n        if (!communityName.trim()) {\n            newErrors.name = 'Community name is required.';\n            isValid = false;\n        }\n        if (!communityDescription.trim()) {\n            newErrors.description = 'Description is required.';\n            isValid = false;\n        }\n\n        // Check for duplicate community names\n        const isDuplicate = communities.some(community => community.name.toLowerCase() === communityName.toLowerCase());\n        if (isValid && isDuplicate && !selectedCommunity) {\n            newErrors.name = 'A community with this name already exists. Please choose a different name.';\n            isValid = false;\n        }    \n\n        // Update errors state\n        setErrors(newErrors);\n\n        // If valid, create or update the community\n        if (isValid) {\n            const communityData = {\n                name: communityName,\n                description: communityDescription,\n                postIDs: selectedCommunity ? selectedCommunity.postIDs : [],\n                startDate: selectedCommunity ? selectedCommunity.startDate : new Date(),\n                members: selectedCommunity ? selectedCommunity.members : [user.displayName],\n                createdBy: selectedCommunity ? selectedCommunity.createdBy : user.displayName\n            };\n\n            let createdCommunity\n            try {\n                if (selectedCommunity) {\n                    // Update the selected community\n                    const updatedCommunity = await updateCommunity(selectedCommunity._id, communityData);\n                    setCommunities(prev => prev.map(community => community._id === updatedCommunity._id ? updatedCommunity : community));\n                    setSelectedCommunity(null) // Clear the selected community after update\n                } else {\n                    // Create a new community\n                    createdCommunity = await createCommunity(communityData);\n                    setCommunities(prev => [...prev, createdCommunity]);\n                }\n\n                // Navigate to the community page\n                loadPage('community', selectedCommunity ? selectedCommunity._id : createdCommunity._id);\n\n                // Reset form fields\n                setCommunityName('');\n                setCommunityDescription('');\n                setErrors({ name: '', description: ''});\n            } catch (error) {\n                // Handle error (e.g., show a notification or log it)\n                console.error('Error creating/updating community:', error);\n            }\n        }\n    };\n\n    // const deleteCommentsRecursively = async (comment) => {\n    //     console.log(comment)\n    //     try {\n    //       // If the comment has replies (commentIDs), recursively delete those first\n    //       if (comment.commentIDs && comment.commentIDs.length > 0) {\n    //         for (const replyId of comment.commentIDs) {\n    //           const reply = comments.find((r) => r._id === replyId);\n    //           await deleteCommentsRecursively(reply); // Recursively delete each reply\n    //         }\n    //       }\n      \n    //       // Now that all replies are deleted, delete the current comment\n    //       await deleteComment(comment._id);\n    //       console.log(`Deleted comment with ID: ${comment._id}`);\n      \n    //       // Optionally, remove the deleted comment from the state to update the UI\n    //       // This assumes you have a state like 'comments' where you store the comments list\n    //       setComments((prevComments) =>\n    //         prevComments.filter((c) => c._id !== comment._id)\n    //       );\n    //       console.log(`comments array: ${comments}`);\n          \n    //     } catch (error) {\n    //       console.error('Error deleting comment:', error);\n    //     }\n    //   };\n\n    //   const deletePosts = async (postIDs) => {\n    //     try {\n    //         for (const postID of postIDs) {\n    //           console.log(`Deleting post with ID: ${postID}`);\n                \n    //           const post = await fetchPost(postID);\n    //           if (!post) {\n    //             console.warn(`Post with ID: ${postID} not found or already deleted.`);\n    //             return;\n    //           }\n              \n    //           console.log(`Post with ID: ${postID} fetched successfully.`);\n\n    //           // Step 2: Fetch and recursively delete associated comments\n    //             if (post.commentIDs && post.commentIDs.length > 0) {\n    //                 console.log(`Processing ${post.commentIDs.length} comments associated with the post.`);\n    //                 for (const commentID of post.commentIDs) {\n    //                 console.log(\"CommentID: \", commentID)\n    //                 const comment = await fetchComment(commentID);\n    //                 if (comment) {\n    //                     await deleteCommentsRecursively(comment); // Call the recursive function directly\n    //                 }\n    //                 }\n    //             }\n    //           // Call the API to delete the post\n    //             await deletePost(postID); // Ensure `deletePost` is implemented to make an API request\n    //             // Update the state to remove the deleted post\n    //             setPosts((prevPosts) =>\n    //                 prevPosts.filter((p) => p._id !== postID)\n    //             );\n    //             console.log(`Post with ID: ${postID} deleted successfully.`);\n    //         }\n    //         console.log(\"All posts in the community have been deleted.\");\n    //         console.log(\"posts array now: \", posts)\n          \n    //     } catch (error) {\n    //         console.error(\"Error deleting posts:\", error);\n    //     }\n    //   }\n\n    // Function to handle deletion\n    const handleDeleteCommunity = async () => {\n        try {\n            // Call API to delete the community\n            deletePosts(selectedCommunity.postIDs)\n            await deleteCommunity(selectedCommunity._id); // Assuming selectedCommunity._id is the community's unique ID\n            // Remove the community from the state\n            setCommunities(prev => prev.filter(community => community._id !== selectedCommunity._id));\n            // Reset the selected community state\n            setSelectedCommunity(null);\n            setShowConfirmation(false); // Close the confirmation popup\n            loadPage(\"userProfile\")\n        } catch (error) {\n            console.error('Error deleting community:', error);\n            // You can show an error message here if needed\n        }\n    };\n    const showConfirm = (e) => {\n        e.preventDefault()\n        console.log(\"show\")\n        setShowConfirmation(true);\n    }\n    return (\n        <div>\n            <h1>Tell us about your community</h1>\n            <p>A name and description help people understand what your community is all about.</p>\n            <form onSubmit={handleCreateCommunity}>\n                <div>\n                    <label htmlFor=\"community-name\">Community Name <span style={{ color: 'red' }}>*</span></label>\n                    <input\n                        type=\"text\"\n                        id=\"community-name\"\n                        value={communityName}\n                        onChange={(e) => setCommunityName(e.target.value)}\n                        maxLength={100}\n                        // required\n                    />\n                    <div className=\"character-counter\">\n                        {communityName.length}/100\n                    </div>\n                    {errors.name && <div className=\"error-message\">{errors.name}</div>}\n                </div>\n                <div>\n                    <label htmlFor=\"community-description\">Description <span style={{ color: 'red' }}>*</span></label>\n                    <textarea\n                        id=\"community-description\"\n                        value={communityDescription}\n                        onChange={(e) => setCommunityDescription(e.target.value)}\n                        maxLength={500}\n                        // required\n                    />\n                     <div className=\"character-counter\">\n                        {communityDescription.length}/500\n                    </div>\n                    {errors.description && <div className=\"error-message\">{errors.description}</div>}\n                </div>\n                 <button type=\"submit\">{selectedCommunity ? 'Update Community' : 'Create Community'}</button>\n                 <button className = \"delete-button\" onClick={(e) => showConfirm(e)} hidden = {!selectedCommunity}>Delete</button>\n            </form>\n            \n            {/* Confirmation Popup */}\n            {showConfirmation && (\n                    <div className=\"confirmation-popup\">\n                        <div className=\"popup-content\">\n                            <h2>Are you sure you want to delete this community?</h2>\n                            <p>This action cannot be undone.</p>\n                            <button onClick={handleDeleteCommunity}>Yes, delete</button>\n                            <button onClick={() => setShowConfirmation(false)}>Cancel</button>\n                        </div>\n                    </div>\n            )}\n        </div>\n    );\n};\n\nexport default NewCommunityPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}