{"ast":null,"code":"var _jsxFileName = \"/Users/felice/Documents/project-habibi/client/src/components/phredditContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { fetchPosts, fetchCommunities, fetchComments, fetchLinkFlairs, fetchUsers } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PhredditContext = /*#__PURE__*/createContext();\nexport const PhredditProvider = ({\n  children\n}) => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [communities, setCommunities] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [linkflairs, setLinkFlairs] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [currentPage, setCurrentPage] = useState('welcome');\n  const [currentCommunityID, setCurrentCommunityID] = useState(null);\n  const [currentPostID, setCurrentPostID] = useState(null);\n  const [searchResult, setSearchResult] = useState([]);\n  const [searchString, setSearchString] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [selectedCommunity, setSelectedCommunity] = useState(null);\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [selectedComment, setSelectedComment] = useState(null);\n\n  // fetchData function that fetches all the data\n  const fetchData = async () => {\n    const [postsData, communitiesData, commentsData, linkFlairsData, usersData] = await Promise.all([fetchPosts(), fetchCommunities(), fetchComments(), fetchLinkFlairs(), fetchUsers()]);\n    setPosts(postsData);\n    setCommunities(communitiesData);\n    setComments(commentsData);\n    setLinkFlairs(linkFlairsData);\n    setUsers(usersData);\n  };\n\n  // Fetch data once when the provider mounts\n  useEffect(() => {\n    fetchData();\n  }, []); // This effect runs only once on mount\n\n  // Refetch data whenever currentPage changes\n  useEffect(() => {\n    fetchData();\n  }, [currentPage]); // This effect runs when currentPage changes\n\n  const loadPage = (page, communityID = null, postID = null, searchResults = null, searchString = null) => {\n    setCurrentPage(page);\n    if (communityID) setCurrentCommunityID(communityID);\n    if (postID) setCurrentPostID(postID);\n    if (searchString || searchResults) {\n      setSearchString(searchString);\n      setSearchResult(searchResults);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(PhredditContext.Provider, {\n    value: {\n      posts,\n      setPosts,\n      communities,\n      setCommunities,\n      comments,\n      setComments,\n      linkflairs,\n      setLinkFlairs,\n      currentPage,\n      currentCommunityID,\n      currentPostID,\n      searchResult,\n      searchString,\n      user,\n      setUser,\n      loadPage,\n      selectedUser,\n      setSelectedUser,\n      selectedCommunity,\n      setSelectedCommunity,\n      selectedPost,\n      setSelectedPost,\n      setSelectedComment,\n      selectedComment,\n      users,\n      setUsers\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the context\n_s(PhredditProvider, \"t1nalxQ1Of/DAIlwSU46A1/QPFw=\");\n_c = PhredditProvider;\nexport const UsePhredditContext = () => {\n  _s2();\n  return useContext(PhredditContext);\n};\n_s2(UsePhredditContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c2 = UsePhredditContext;\nvar _c, _c2;\n$RefreshReg$(_c, \"PhredditProvider\");\n$RefreshReg$(_c2, \"UsePhredditContext\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","fetchPosts","fetchCommunities","fetchComments","fetchLinkFlairs","fetchUsers","jsxDEV","_jsxDEV","PhredditContext","PhredditProvider","children","_s","posts","setPosts","communities","setCommunities","comments","setComments","linkflairs","setLinkFlairs","users","setUsers","currentPage","setCurrentPage","currentCommunityID","setCurrentCommunityID","currentPostID","setCurrentPostID","searchResult","setSearchResult","searchString","setSearchString","user","setUser","selectedUser","setSelectedUser","selectedCommunity","setSelectedCommunity","selectedPost","setSelectedPost","selectedComment","setSelectedComment","fetchData","postsData","communitiesData","commentsData","linkFlairsData","usersData","Promise","all","loadPage","page","communityID","postID","searchResults","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","UsePhredditContext","_s2","_c2","$RefreshReg$"],"sources":["/Users/felice/Documents/project-habibi/client/src/components/phredditContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { fetchPosts, fetchCommunities, fetchComments, fetchLinkFlairs, fetchUsers } from './api';\n\nexport const PhredditContext = createContext();\n\nexport const PhredditProvider = ({ children }) => {\n  const [posts, setPosts] = useState([]);\n  const [communities, setCommunities] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [linkflairs, setLinkFlairs] = useState([]);\n  const [users, setUsers] = useState([]);\n\n  const [currentPage, setCurrentPage] = useState('welcome');\n  const [currentCommunityID, setCurrentCommunityID] = useState(null); \n  const [currentPostID, setCurrentPostID] = useState(null);\n  const [searchResult, setSearchResult] = useState([]);\n  const [searchString, setSearchString] = useState(\"\");\n  const [user, setUser] = useState(null)\n\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [selectedCommunity, setSelectedCommunity] = useState(null);\n  const [selectedPost, setSelectedPost] = useState(null)\n  const [selectedComment, setSelectedComment] = useState(null)\n\n  // fetchData function that fetches all the data\n  const fetchData = async () => {\n    const [postsData, communitiesData, commentsData, linkFlairsData, usersData] = await Promise.all([\n      fetchPosts(),\n      fetchCommunities(),\n      fetchComments(),\n      fetchLinkFlairs(),\n      fetchUsers()\n    ]);\n    setPosts(postsData);\n    setCommunities(communitiesData);\n    setComments(commentsData);\n    setLinkFlairs(linkFlairsData);\n    setUsers(usersData);\n  };\n\n  // Fetch data once when the provider mounts\n  useEffect(() => {\n    fetchData();\n  }, []); // This effect runs only once on mount\n\n  // Refetch data whenever currentPage changes\n  useEffect(() => {\n    fetchData();\n  }, [currentPage]); // This effect runs when currentPage changes\n\n  const loadPage = (page, communityID = null, postID = null, searchResults = null, searchString = null) => {\n    setCurrentPage(page);\n    \n    if (communityID) setCurrentCommunityID(communityID)\n    if (postID) setCurrentPostID(postID);\n    if (searchString || searchResults) {\n      setSearchString(searchString);\n      setSearchResult(searchResults);\n    }\n  };\n\n  return (\n    <PhredditContext.Provider value={{\n      posts, setPosts, communities, setCommunities, comments, setComments, linkflairs, setLinkFlairs, \n      currentPage, currentCommunityID, currentPostID, \n      searchResult, searchString, user, setUser, loadPage,\n      selectedUser, setSelectedUser, selectedCommunity, setSelectedCommunity,\n      selectedPost, setSelectedPost, setSelectedComment, selectedComment, users, setUsers\n    }}>\n      {children}\n    </PhredditContext.Provider>\n  );\n};\n\n// Custom hook to use the context\nexport const UsePhredditContext = () => {\n    return useContext(PhredditContext);\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}