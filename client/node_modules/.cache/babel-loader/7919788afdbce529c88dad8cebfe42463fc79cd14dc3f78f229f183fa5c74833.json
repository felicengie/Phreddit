{"ast":null,"code":"var _jsxFileName = \"/Users/felice/Documents/project-habibi/client/src/components/NewPostPage/CreatePost.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../../stylesheets/index.css';\nimport CommunitySelect from './CommunitySelect';\nimport PostTitle from './PostTitle';\nimport LinkFlair from './LinkFlair';\nimport PostContent from './PostContent';\nimport UsernameInput from './UsernameInput';\nimport ErrorMessage from './ErrorMessage';\nimport { UsePhredditContext } from '../phredditContext';\nimport { createPost, createLinkFlair, updateCommunity } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreatePost = () => {\n  _s();\n  const {\n    communities,\n    linkflairs,\n    loadPage,\n    setPosts,\n    setCommunities,\n    setLinkFlairs\n  } = UsePhredditContext();\n  const [communityID, setCommunityID] = useState('');\n  const [postTitle, setPostTitle] = useState('');\n  const [selectedFlair, setSelectedFlair] = useState('');\n  const [newFlair, setNewFlair] = useState('');\n  const [postContent, setPostContent] = useState('');\n  const [username, setUsername] = useState('');\n  const [errors, setErrors] = useState({});\n  const validateInputs = () => {\n    const newErrors = {};\n    if (!communityID) newErrors.community = 'Please select a community.';\n    if (!postTitle) newErrors.title = 'Post title is required.';\n    if (newFlair && newFlair.length > 30) {\n      newErrors.flair = 'New link flair must be 30 characters or less.';\n    } else if (selectedFlair && newFlair) {\n      newErrors.flair = 'You can only apply one link flair. Please choose one option.';\n    }\n    if (!postContent) newErrors.content = 'Post content is required.';\n    if (!username) newErrors.username = 'Username is required.';\n    return newErrors;\n  };\n  const handleCreatePost = async event => {\n    event.preventDefault();\n    const newErrors = validateInputs();\n    setErrors(newErrors);\n    if (Object.keys(newErrors).length > 0) {\n      return;\n    }\n    let linkFlairID = selectedFlair._id;\n\n    // Step 1: Create the new link flair if needed\n    if (newFlair) {\n      const createdLinkFlair = await createLinkFlair(newFlair);\n      linkFlairID = createdLinkFlair._id;\n      setLinkFlairs(prev => [...prev, createdLinkFlair]);\n    }\n\n    // If valid, create a new post\n    const newPost = {\n      // postID: `p${posts.length + 1}`, // Unique ID for the post\n      title: postTitle,\n      content: postContent,\n      linkFlairID: linkFlairID,\n      postedBy: username,\n      postedDate: new Date(),\n      // Set the current date\n      commentIDs: [],\n      // Initialize with no comments\n      views: 0 // Initialize views count\n    };\n    console.log(newPost);\n    console.log(communityID);\n    console.log(selectedFlair);\n\n    //make api call to update database\n    const createdPost = await createPost(newPost);\n    setPosts(prevPosts => [createdPost, ...prevPosts]);\n\n    // Update the community's post IDs in the data model and component state\n    // Step 3: Update the community with the new post ID\n    const updatedCommunity = communities.find(comm => comm._id === communityID);\n    if (updatedCommunity) {\n      const updatedPostIDs = [...updatedCommunity.postIDs, createdPost._id];\n      await updateCommunity(communityID, {\n        postIDs: updatedPostIDs\n      });\n\n      // Update communities in context\n      setCommunities(prevCommunities => prevCommunities.map(comm => comm._id === communityID ? {\n        ...comm,\n        postIDs: updatedPostIDs\n      } : comm));\n    }\n\n    // setCommunities(prevCommunities => {\n    //     const updatedCommunities = [...prevCommunities];\n    //     const communityIndex = updatedCommunities.findIndex(comm => comm.communityID === communityID);\n    //     if (communityIndex !== -1) {\n    //         updatedCommunities[communityIndex].postIDs.push(newPost.postID);\n    //     }\n    //     return updatedCommunities;\n    // });\n\n    // const community = communities.find(comm => comm._id === communityID);\n    // if (community) {\n    //     community.postIDs.push(newPost.postID);\n    // }\n\n    // Update the link flair if newFlair is added\n    // if (newFlair) {\n    //     const newLinkFlair = {\n    //         linkFlairID: `lf${linkflairs.length + 1}`,\n    //         content: newFlair\n    //     };\n    //     linkflairs.push(newLinkFlair);\n    //     newPost.linkFlairID = newLinkFlair.linkFlairID;\n    // } else {\n    //     newPost.linkFlairID = selectedFlair;\n    // }\n\n    // Add the new post to the data model and update the state\n    // posts.unshift(newPost);\n\n    loadPage('home');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create a New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCreatePost,\n      children: [/*#__PURE__*/_jsxDEV(CommunitySelect, {\n        communities: communities,\n        onSelect: setCommunityID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        message: errors.community\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PostTitle, {\n        title: postTitle,\n        onTitleChange: setPostTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        message: errors.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LinkFlair, {\n        linkFlairs: linkflairs,\n        selectedFlair: selectedFlair,\n        onSelectFlair: setSelectedFlair,\n        newFlair: newFlair,\n        onNewFlairChange: setNewFlair\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        message: errors.flair\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PostContent, {\n        content: postContent,\n        onContentChange: setPostContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        message: errors.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UsernameInput, {\n        username: username,\n        onUsernameChange: setUsername\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        message: errors.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s(CreatePost, \"8MgyrH/cRJY0/4z5DZ7Z61OedwY=\");\n_c = CreatePost;\nexport default CreatePost;\nvar _c;\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"names":["React","useState","useEffect","CommunitySelect","PostTitle","LinkFlair","PostContent","UsernameInput","ErrorMessage","UsePhredditContext","createPost","createLinkFlair","updateCommunity","jsxDEV","_jsxDEV","CreatePost","_s","communities","linkflairs","loadPage","setPosts","setCommunities","setLinkFlairs","communityID","setCommunityID","postTitle","setPostTitle","selectedFlair","setSelectedFlair","newFlair","setNewFlair","postContent","setPostContent","username","setUsername","errors","setErrors","validateInputs","newErrors","community","title","length","flair","content","handleCreatePost","event","preventDefault","Object","keys","linkFlairID","_id","createdLinkFlair","prev","newPost","postedBy","postedDate","Date","commentIDs","views","console","log","createdPost","prevPosts","updatedCommunity","find","comm","updatedPostIDs","postIDs","prevCommunities","map","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onSelect","message","onTitleChange","linkFlairs","onSelectFlair","onNewFlairChange","onContentChange","onUsernameChange","type","_c","$RefreshReg$"],"sources":["/Users/felice/Documents/project-habibi/client/src/components/NewPostPage/CreatePost.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../../stylesheets/index.css';\nimport CommunitySelect from './CommunitySelect';\nimport PostTitle from './PostTitle';\nimport LinkFlair from './LinkFlair';\nimport PostContent from './PostContent';\nimport UsernameInput from './UsernameInput';\nimport ErrorMessage from './ErrorMessage';\nimport { UsePhredditContext } from '../phredditContext';\nimport { createPost, createLinkFlair, updateCommunity } from '../api';\n\nconst CreatePost = () => {\n    const {communities, linkflairs, loadPage, setPosts, setCommunities, setLinkFlairs } = UsePhredditContext()\n\n    const [communityID, setCommunityID] = useState('');\n    const [postTitle, setPostTitle] = useState('');\n    const [selectedFlair, setSelectedFlair] = useState('');\n    const [newFlair, setNewFlair] = useState('');\n    const [postContent, setPostContent] = useState('');\n    const [username, setUsername] = useState('');\n    const [errors, setErrors] = useState({});\n\n    \n    const validateInputs = () => {\n        const newErrors = {};\n        if (!communityID) newErrors.community = 'Please select a community.';\n        if (!postTitle) newErrors.title = 'Post title is required.';\n        if (newFlair && newFlair.length > 30) {\n            newErrors.flair = 'New link flair must be 30 characters or less.';\n        } else if (selectedFlair && newFlair) {\n            newErrors.flair = 'You can only apply one link flair. Please choose one option.';\n        }\n        if (!postContent) newErrors.content = 'Post content is required.';\n        if (!username) newErrors.username = 'Username is required.';\n        return newErrors;\n    };\n\n    const handleCreatePost = async (event) => {\n        event.preventDefault();\n        const newErrors = validateInputs();\n        setErrors(newErrors);\n\n        if (Object.keys(newErrors).length > 0) {\n            return;\n        }\n\n        let linkFlairID = selectedFlair._id;\n\n        // Step 1: Create the new link flair if needed\n        if (newFlair) {\n            const createdLinkFlair = await createLinkFlair(newFlair);\n            linkFlairID = createdLinkFlair._id;\n            setLinkFlairs(prev => [...prev, createdLinkFlair]);\n        }\n\n        // If valid, create a new post\n        const newPost = {\n            // postID: `p${posts.length + 1}`, // Unique ID for the post\n            title: postTitle,\n            content: postContent,\n            linkFlairID: linkFlairID,\n            postedBy: username,\n            postedDate: new Date(), // Set the current date\n            commentIDs: [], // Initialize with no comments\n            views: 0, // Initialize views count\n        };\n\n        console.log(newPost)\n        console.log(communityID)\n        console.log(selectedFlair)\n\n        //make api call to update database\n        const createdPost = await createPost(newPost);\n        setPosts(prevPosts => [createdPost, ...prevPosts]);\n\n        \n        // Update the community's post IDs in the data model and component state\n        // Step 3: Update the community with the new post ID\n        const updatedCommunity = communities.find(comm => comm._id === communityID);\n        if (updatedCommunity) {\n            const updatedPostIDs = [...updatedCommunity.postIDs, createdPost._id];\n            await updateCommunity(communityID, { postIDs: updatedPostIDs });\n             \n            // Update communities in context\n             setCommunities(prevCommunities =>\n                prevCommunities.map(comm =>\n                    comm._id === communityID ? { ...comm, postIDs: updatedPostIDs } : comm\n                )\n            );\n\n        }\n\n            // setCommunities(prevCommunities => {\n    //     const updatedCommunities = [...prevCommunities];\n    //     const communityIndex = updatedCommunities.findIndex(comm => comm.communityID === communityID);\n    //     if (communityIndex !== -1) {\n    //         updatedCommunities[communityIndex].postIDs.push(newPost.postID);\n    //     }\n    //     return updatedCommunities;\n    // });\n\n    // const community = communities.find(comm => comm._id === communityID);\n    // if (community) {\n    //     community.postIDs.push(newPost.postID);\n    // }\n\n    // Update the link flair if newFlair is added\n    // if (newFlair) {\n    //     const newLinkFlair = {\n    //         linkFlairID: `lf${linkflairs.length + 1}`,\n    //         content: newFlair\n    //     };\n    //     linkflairs.push(newLinkFlair);\n    //     newPost.linkFlairID = newLinkFlair.linkFlairID;\n    // } else {\n    //     newPost.linkFlairID = selectedFlair;\n    // }\n\n    // Add the new post to the data model and update the state\n    // posts.unshift(newPost);\n\n    loadPage('home')\n\n    };\n\n    return (\n        <div>\n            <h1>Create a New Post</h1>\n            <form onSubmit={handleCreatePost}>\n                <CommunitySelect communities={communities} onSelect={setCommunityID} />\n                <ErrorMessage message={errors.community}/>\n                \n                <PostTitle title={postTitle} onTitleChange={setPostTitle} />\n                <ErrorMessage message={errors.title} />\n\n                \n                <LinkFlair\n                    linkFlairs={linkflairs}\n                    selectedFlair={selectedFlair}\n                    onSelectFlair={setSelectedFlair}\n                    newFlair={newFlair}\n                    onNewFlairChange={setNewFlair}\n                />\n                <ErrorMessage message={errors.flair} />\n\n                <PostContent content={postContent} onContentChange={setPostContent} />\n                <ErrorMessage message={errors.content} />\n                \n\n                <UsernameInput username={username} onUsernameChange={setUsername} />\n                <ErrorMessage message={errors.username} />\n\n\n                <button type=\"submit\">Submit Post</button>\n            </form>\n        </div>\n    );\n};\n\nexport default CreatePost;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}