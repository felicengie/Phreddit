{"ast":null,"code":"// api.js\nimport axios from 'axios';\nconst API_URL = 'http://localhost:8000/api';\n\n// Fetch data with error handling\nexport const fetchPosts = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/posts`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching posts:', error);\n    throw error; // Propagate error so that it can be handled in the component\n  }\n};\nexport const fetchComments = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/comments`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching comments:', error);\n    throw error;\n  }\n};\nexport const fetchCommunities = async () => {\n  try {\n    // Fetch the communities from the API\n    const response = await axios.get(`${API_URL}/communities`);\n    const communities = response.data;\n\n    // Update memberCount for each community if it's not already set\n    const updatedCommunities = communities.map(community => {\n      if (!community.memberCount) {\n        community.memberCount = community.members.length;\n      }\n      return community;\n    });\n    return updatedCommunities;\n  } catch (error) {\n    console.error('Error fetching communities:', error);\n    throw error;\n  }\n};\nexport const fetchLinkFlairs = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/linkflairs`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching link flairs:', error);\n    throw error;\n  }\n};\n\n// Create, update, and delete posts with error handling\nexport const createPost = async post => {\n  try {\n    const response = await axios.post(`${API_URL}/posts`, post);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating post:', error);\n    throw error;\n  }\n};\nexport const createLinkFlair = async flairContent => {\n  try {\n    const response = await axios.post(`${API_URL}/linkflairs`, {\n      content: flairContent\n    });\n    return response.data; // This should return the new linkFlair with its generated ID\n  } catch (error) {\n    console.error('Error creating link flair:', error);\n    throw error;\n  }\n};\nexport const createCommunity = async community => {\n  try {\n    if (!community.memberCount) {\n      community.memberCount = community.members.length;\n    }\n    const response = await axios.post(`${API_URL}/communities`, community);\n    return response.data;\n  } catch (error) {\n    console.log(\"Error creating community\", error);\n    throw error;\n  }\n};\nexport const createComment = async comment => {\n  try {\n    const response = await axios.post(`${API_URL}/comments`, comment);\n    return response.data;\n  } catch (error) {\n    console.log(\"Error creaeting comment\", error);\n    throw error;\n  }\n};\nexport const updatePost = async (postId, post) => {\n  try {\n    const response = await axios.put(`${API_URL}/posts/${postId}`, post);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating post:', error);\n    throw error;\n  }\n};\nexport const updateCommunity = async (communityID, updatedCommunityData) => {\n  try {\n    const response = await axios.put(`${API_URL}/communities/${communityID}`, updatedCommunityData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating community:', error);\n    throw error;\n  }\n};\nexport const updateComment = async (commentID, updatedCommentData) => {\n  try {\n    const response = await axios.put(`${API_URL}/comments/${commentID}`, updatedCommentData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating comment:', error);\n    throw error;\n  }\n};\nexport const deletePost = async postId => {\n  try {\n    const response = await axios.delete(`${API_URL}/posts/${postId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting post:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","fetchPosts","response","get","data","error","console","fetchComments","fetchCommunities","communities","updatedCommunities","map","community","memberCount","members","length","fetchLinkFlairs","createPost","post","createLinkFlair","flairContent","content","createCommunity","log","createComment","comment","updatePost","postId","put","updateCommunity","communityID","updatedCommunityData","updateComment","commentID","updatedCommentData","deletePost","delete"],"sources":["/Users/felice/Documents/project-habibi/client/src/components/api.js"],"sourcesContent":["// api.js\nimport axios from 'axios';\n\nconst API_URL = 'http://localhost:8000/api';\n\n// Fetch data with error handling\nexport const fetchPosts = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/posts`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching posts:', error);\n    throw error;  // Propagate error so that it can be handled in the component\n  }\n};\n\nexport const fetchComments = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/comments`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching comments:', error);\n    throw error;\n  }\n};\n\nexport const fetchCommunities = async () => {\n  try {\n    // Fetch the communities from the API\n    const response = await axios.get(`${API_URL}/communities`);\n    const communities = response.data;\n\n    // Update memberCount for each community if it's not already set\n    const updatedCommunities = communities.map(community => {\n      if (!community.memberCount) {\n        community.memberCount = community.members.length;\n      }\n      return community;\n    });\n\n    return updatedCommunities;\n  } catch (error) {\n    console.error('Error fetching communities:', error);\n    throw error;\n  }\n};\n\nexport const fetchLinkFlairs = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/linkflairs`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching link flairs:', error);\n    throw error;\n  }\n};\n\n// Create, update, and delete posts with error handling\nexport const createPost = async (post) => {\n  try {\n    const response = await axios.post(`${API_URL}/posts`, post);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating post:', error);\n    throw error;\n  }\n};\n\nexport const createLinkFlair = async (flairContent) => {\n  try {\n    const response = await axios.post(`${API_URL}/linkflairs`, { content: flairContent });\n    return response.data; // This should return the new linkFlair with its generated ID\n  } catch (error) {\n    console.error('Error creating link flair:', error);\n    throw error;\n  }\n};\n\nexport const createCommunity = async (community) =>{\n  try{\n    if (!community.memberCount) {\n      community.memberCount = community.members.length;\n    }\n\n    const response = await axios.post(`${API_URL}/communities`, community)\n    return response.data;\n  }catch (error){\n    console.log(\"Error creating community\", error)\n    throw error;\n  }\n}\n\nexport const createComment = async (comment) => {\n  try{\n    const response = await axios.post(`${API_URL}/comments`, comment)\n    return response.data\n  }catch(error){\n    console.log(\"Error creaeting comment\", error)\n    throw error;\n  }\n}\n\nexport const updatePost = async (postId, post) => {\n  try {\n    const response = await axios.put(`${API_URL}/posts/${postId}`, post);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating post:', error);\n    throw error;\n  }\n};\n\nexport const updateCommunity = async (communityID, updatedCommunityData) => {\n  try {\n    const response = await axios.put(`${API_URL}/communities/${communityID}`, updatedCommunityData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating community:', error);\n    throw error;\n  }\n};\n\n\nexport const updateComment = async (commentID, updatedCommentData) =>{\n  try{\n    const response = await axios.put(`${API_URL}/comments/${commentID}`, updatedCommentData)\n    return response.data\n  } catch (error){\n    console.error('Error updating comment:', error);\n    throw error;\n  }\n}\n\nexport const deletePost = async (postId) => {\n  try {\n    const response = await axios.delete(`${API_URL}/posts/${postId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting post:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}