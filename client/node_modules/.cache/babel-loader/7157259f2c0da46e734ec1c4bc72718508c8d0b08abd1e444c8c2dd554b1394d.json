{"ast":null,"code":"var _jsxFileName = \"/Users/felice/Documents/project-habibi/client/src/components/PostPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getTimeDifference, calculateCommentCount } from './functions.js';\nimport CreateComment from './NewCommentPage/CreateComment.js';\nimport { UsePhredditContext } from './phredditContext.js';\nimport { createComment, updateComment, updatePost } from './api.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostPage = () => {\n  _s();\n  const {\n    posts,\n    currentPostID,\n    communities,\n    linkflairs,\n    comments,\n    setComments,\n    setPosts\n  } = UsePhredditContext();\n  const [post, setPost] = useState(posts.find(p => p._id === currentPostID));\n  const [community, setCommunity] = useState(communities.find(c => c.postIDs.includes(currentPostID)));\n  const [showCommentForm, setShowCommentForm] = useState(false);\n  const [currentCommentID, setCurrentCommentID] = useState(null);\n  useEffect(() => {\n    const foundPost = posts.find(p => p._id === currentPostID);\n    const foundCommunity = communities.find(c => c.postIDs.includes(currentPostID));\n    const updateViewCount = async () => {\n      if (foundPost) {\n        setPost({\n          ...foundPost,\n          views: foundPost.views + 1\n        }); // Local view count increment\n        foundPost.views += 1; // Update model data view count\n        const updateViewCount = await updatePost(foundPost._id, foundPost);\n        setCommunity(foundCommunity);\n      }\n    };\n    updateViewCount();\n  }, [currentPostID]);\n  if (!post || !community) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 37\n  }, this);\n  const linkFlairData = linkflairs.find(flair => flair._id === post.linkFlairID);\n\n  // const calculateCommentCount = (post) => {\n  //     // Helper function to count comments recursively\n  //     const countReplies = (commentIDs) => { \n  //       let totalCount = 0;\n  //       commentIDs.forEach(id => {\n  //         const comment =comments.find(c => c._id === id);\n  //         if (comment) { totalCount += 1 + countReplies(comment.commentIDs); }\n  //       });\n  //       return totalCount;\n  //     };\n  //     return countReplies(post.commentIDs);\n  //   }\n\n  // const displayComments = (comments, commentIDs = [], level = 0) => {\n  //     console.log(comments)\n  //      // Sort the top-level commentIDs based on the commentedDate in descending order\n  //     const sortedCommentIDs = [...commentIDs].sort((a, b) => {\n  //       const commentA = comments.find(c => c._id === a);\n  //       const commentB = comments.find(c => c._id === b);\n  //       return new Date(commentB.commentedDate) - new Date(commentA.commentedDate);\n  //     });\n  //     // Array to hold comment JSX elements\n  //     console.log(\"sortedComments:\",sortedCommentIDs)\n  //     return sortedCommentIDs.map(commentID => {\n  //       const comment = comments.find(c => c._id === commentID); // Find the comment by ID\n  //       console.log(\"comment Found: \", comment)\n  //       if (comment) {\n  //         // Create a comment wrapper div\n  //         return (\n  //           <div key={comment._id} className=\"comment-wrapper\" style={{ marginLeft: `${level * 20}px` }}>\n  //             <div>{comment.commentedBy} | {getTimeDifference(comment.commentedDate.toLocaleString())}</div>\n  //             <div>{comment.content}</div>\n\n  //             {/* Reply button */}\n  //             <button onClick={() => handleAddCommentClick(comment._id)} >Reply</button>\n\n  //             {/* Recursively display replies (if any) to the current comment */}\n  //             {comment.commentIDs && comment.commentIDs.length > 0 && displayComments(comments, comment.commentIDs, level + 1)}\n  //           </div>\n  //         );\n  //       }\n  //       return null; // If the comment is not found, return null\n  //     });\n  //   };\n\n  const displayComments = (comments, commentIDs = [], level = 0) => {\n    if (!Array.isArray(commentIDs) || commentIDs.length === 0) {\n      // If there are no comment IDs to display, return an empty JSX element\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No comments yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 18\n      }, this);\n    }\n\n    // Sort the top-level commentIDs based on the commentedDate in descending order\n    const sortedCommentIDs = commentIDs.map(id => comments.find(c => c._id === id)) // Map IDs to comment objects\n    .filter(comment => comment && comment.commentedDate) // Filter out undefined or invalid comments\n    .sort((a, b) => new Date(b.commentedDate) - new Date(a.commentedDate)); // Sort by date\n\n    // If no valid comments exist after filtering, return a message\n    if (sortedCommentIDs.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No comments yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 18\n      }, this);\n    }\n    return sortedCommentIDs.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-wrapper\",\n      style: {\n        marginLeft: `${level * 20}px`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [comment.commentedBy, \" | \", getTimeDifference(comment.commentedDate)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: comment.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAddCommentClick(comment._id),\n        children: \"Reply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }, this), comment.commentIDs && comment.commentIDs.length > 0 && displayComments(comments, comment.commentIDs, level + 1)]\n    }, comment._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }, this));\n  };\n  const handleAddCommentClick = commentID => {\n    setShowCommentForm(true); // Show the comment form when \"Add a comment\" is clicked\n    setCurrentCommentID(commentID);\n  };\n  // const handleSubmitComment = async (newComment) => {\n  //     // Handle the new comment submission\n  //     //console.log('New comment submitted:', newComment);\n\n  //     // Update the model's comments data\n  //     const addComment = {\n  //         content: newComment.commentContent,\n  //         commentIDs: [], // Initialize an empty array for any potential replies\n  //         commentedBy: newComment.username,\n  //         commentedDate: new Date(), // Set the current date\n  //     };\n\n  //     const comment = await createComment(addComment);\n  //     setComments((prevComments) => [...prevComments, newComment]);\n\n  //     //  // Add the new comment to the comments array\n  //     //  comments.push(addComment);\n  //     //  console.log(addComment)\n  //     //  console.log(comments)\n\n  //        // If it's a reply to an existing comment, update the parent's commentIDs\n  //     if (newComment.parentCommentID) {\n  //         const parentComment = comments.find(comment => comment._id === newComment.parentCommentID);\n  //         if (parentComment) {\n  //             parentComment.commentIDs.push(newComment._id);\n  //             const updatedComment = await updateComment(parentComment._id, parentComment);\n  //             console.log(updatedComment)\n  //             setComments((prevComments) =>\n  //               prevComments.map((comment) =>\n  //                 comment._id === parentComment._id ? parentComment : comment\n  //               ))\n  //         } \n  //     } else {\n\n  //         post.commentIDs.push(newComment._id);\n  //         const updatedPost = await updatePost(post._id, post);\n  //         console.log(updatedPost)\n  //          // Update the post in context\n  //         setPosts((prevPosts) =>\n  //           prevPosts.map((p) => (p._id === post._id ? post : p))\n  //         );\n  //     }\n\n  //     setShowCommentForm(false); // Hide the form after submission\n  // }\n\n  const handleSubmitComment = async newCommentData => {\n    // Handle the new comment submission\n    const addComment = {\n      content: newCommentData.commentContent,\n      commentIDs: [],\n      // Initialize an empty array for any potential replies\n      commentedBy: newCommentData.username,\n      commentedDate: new Date() // Set the current date\n    };\n    console.log(\"comment data: \", addComment);\n    const newComment = await createComment(addComment); // Variable with a unique name\n    setComments(prevComments => [...prevComments, newComment]);\n    console.log(\"created comment successfully\", newComment);\n\n    // If it's a reply to an existing comment, update the parent's commentIDs\n    if (newCommentData.parentCommentID) {\n      console.log(\"parent id: \", newCommentData.parentCommentID);\n      const parentComment = comments.find(comment => comment._id === newCommentData.parentCommentID);\n      console.log(\"parent comment found: \", parentComment);\n      if (parentComment) {\n        parentComment.commentIDs.push(newComment._id);\n        console.log(\"Updated parentComment: \", parentComment);\n        console.log(\"calling updateComment api: \", parentComment._id, parentComment);\n        const updatedComment = await updateComment(parentComment._id, parentComment);\n        console.log(\"Updated comment: \", updatedComment);\n        setComments(prevComments => prevComments.map(comment => comment._id === parentComment._id ? updatedComment : comment));\n      }\n    } else {\n      post.commentIDs.push(newComment._id);\n      console.log(\"New comment id: \", newComment._id);\n      const updatedPost = await updatePost(post._id, post);\n      console.log(\"Updated Post: \", updatedPost);\n      setPosts(prevPosts => prevPosts.map(p => p._id === post._id ? updatedPost : p));\n    }\n    setShowCommentForm(false); // Hide the form after submission\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"postPage\",\n    children: !showCommentForm ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"postPage-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"community-name\",\n          children: community.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"post-timestamp\",\n          children: [\" | \", getTimeDifference(post.postedDate.toLocaleString())]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"posted-by\",\n          children: post.postedBy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"post-title\",\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 17\n        }, this), linkFlairData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"link-flair\",\n          children: linkFlairData.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-content\",\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"counts\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"view-count\",\n            children: [\"Views: \", post.views]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"comment-count\",\n            children: [\" Comments: \", calculateCommentCount(post, comments)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAddCommentClick(null),\n        children: \"Add a comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments-section\",\n        children: displayComments(comments, post.commentIDs)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(CreateComment, {\n      postID: currentPostID,\n      parentCommentID: currentCommentID,\n      onSubmit: handleSubmitComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 18\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 9\n  }, this);\n};\n_s(PostPage, \"zq0+dyZPkIXgRLNVbHrPMo5wXgs=\");\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useState","useEffect","getTimeDifference","calculateCommentCount","CreateComment","UsePhredditContext","createComment","updateComment","updatePost","jsxDEV","_jsxDEV","Fragment","_Fragment","PostPage","_s","posts","currentPostID","communities","linkflairs","comments","setComments","setPosts","post","setPost","find","p","_id","community","setCommunity","c","postIDs","includes","showCommentForm","setShowCommentForm","currentCommentID","setCurrentCommentID","foundPost","foundCommunity","updateViewCount","views","children","fileName","_jsxFileName","lineNumber","columnNumber","linkFlairData","flair","linkFlairID","displayComments","commentIDs","level","Array","isArray","length","sortedCommentIDs","map","id","filter","comment","commentedDate","sort","a","b","Date","className","style","marginLeft","commentedBy","content","onClick","handleAddCommentClick","commentID","handleSubmitComment","newCommentData","addComment","commentContent","username","console","log","newComment","prevComments","parentCommentID","parentComment","push","updatedComment","updatedPost","prevPosts","name","postedDate","toLocaleString","postedBy","title","postID","onSubmit","_c","$RefreshReg$"],"sources":["/Users/felice/Documents/project-habibi/client/src/components/PostPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getTimeDifference, calculateCommentCount } from './functions.js';\nimport CreateComment from './NewCommentPage/CreateComment.js';\nimport { UsePhredditContext } from './phredditContext.js';\nimport { createComment, updateComment, updatePost} from './api.js';\n\n\nconst PostPage = () => {\n    const {posts, currentPostID, communities, linkflairs, comments, setComments, setPosts} = UsePhredditContext()\n    const [post, setPost] = useState(posts.find(p => p._id === currentPostID));\n    const [community, setCommunity] = useState(communities.find(c => c.postIDs.includes(currentPostID)));\n    const [showCommentForm, setShowCommentForm] = useState(false);\n    const [currentCommentID, setCurrentCommentID] = useState(null);\n\n\n    useEffect(() => {\n    const foundPost = posts.find(p => p._id === currentPostID);\n    const foundCommunity = communities.find(c => c.postIDs.includes(currentPostID));\n    \n    const updateViewCount = async () => {\n      if (foundPost) {\n          setPost({ ...foundPost, views: foundPost.views + 1 }); // Local view count increment\n          foundPost.views += 1; // Update model data view count\n          const updateViewCount = await updatePost(foundPost._id, foundPost)\n          setCommunity(foundCommunity);\n    }}\n\n    updateViewCount();\n    }, [currentPostID]);\n\n    if (!post || !community) return <div>Loading...</div>;\n\n   \n\n    const linkFlairData = linkflairs.find(flair => flair._id === post.linkFlairID);\n\n\n    // const calculateCommentCount = (post) => {\n    //     // Helper function to count comments recursively\n    //     const countReplies = (commentIDs) => { \n    //       let totalCount = 0;\n    //       commentIDs.forEach(id => {\n    //         const comment =comments.find(c => c._id === id);\n    //         if (comment) { totalCount += 1 + countReplies(comment.commentIDs); }\n    //       });\n    //       return totalCount;\n    //     };\n    //     return countReplies(post.commentIDs);\n    //   }\n\n\n    // const displayComments = (comments, commentIDs = [], level = 0) => {\n    //     console.log(comments)\n    //      // Sort the top-level commentIDs based on the commentedDate in descending order\n    //     const sortedCommentIDs = [...commentIDs].sort((a, b) => {\n    //       const commentA = comments.find(c => c._id === a);\n    //       const commentB = comments.find(c => c._id === b);\n    //       return new Date(commentB.commentedDate) - new Date(commentA.commentedDate);\n    //     });\n    //     // Array to hold comment JSX elements\n    //     console.log(\"sortedComments:\",sortedCommentIDs)\n    //     return sortedCommentIDs.map(commentID => {\n    //       const comment = comments.find(c => c._id === commentID); // Find the comment by ID\n    //       console.log(\"comment Found: \", comment)\n    //       if (comment) {\n    //         // Create a comment wrapper div\n    //         return (\n    //           <div key={comment._id} className=\"comment-wrapper\" style={{ marginLeft: `${level * 20}px` }}>\n    //             <div>{comment.commentedBy} | {getTimeDifference(comment.commentedDate.toLocaleString())}</div>\n    //             <div>{comment.content}</div>\n                \n    //             {/* Reply button */}\n    //             <button onClick={() => handleAddCommentClick(comment._id)} >Reply</button>\n                \n    //             {/* Recursively display replies (if any) to the current comment */}\n    //             {comment.commentIDs && comment.commentIDs.length > 0 && displayComments(comments, comment.commentIDs, level + 1)}\n    //           </div>\n    //         );\n    //       }\n    //       return null; // If the comment is not found, return null\n    //     });\n    //   };\n\n    const displayComments = (comments, commentIDs = [], level = 0) => {\n      if (!Array.isArray(commentIDs) || commentIDs.length === 0) {\n          // If there are no comment IDs to display, return an empty JSX element\n          return <div>No comments yet.</div>;\n      }\n  \n      // Sort the top-level commentIDs based on the commentedDate in descending order\n      const sortedCommentIDs = commentIDs\n          .map(id => comments.find(c => c._id === id)) // Map IDs to comment objects\n          .filter(comment => comment && comment.commentedDate) // Filter out undefined or invalid comments\n          .sort((a, b) => new Date(b.commentedDate) - new Date(a.commentedDate)) // Sort by date\n  \n      // If no valid comments exist after filtering, return a message\n      if (sortedCommentIDs.length === 0) {\n          return <div>No comments yet.</div>;\n      }\n  \n      return sortedCommentIDs.map(comment => (\n          <div key={comment._id} className=\"comment-wrapper\" style={{ marginLeft: `${level * 20}px` }}>\n              <div>{comment.commentedBy} | {getTimeDifference(comment.commentedDate)}</div>\n              <div>{comment.content}</div>\n  \n              {/* Reply button */}\n              <button onClick={() => handleAddCommentClick(comment._id)}>Reply</button>\n  \n              {/* Recursively display replies (if any) */}\n              {comment.commentIDs && comment.commentIDs.length > 0 && displayComments(comments, comment.commentIDs, level + 1)}\n          </div>\n      ));\n  };\n\n\n    const handleAddCommentClick = (commentID) => {\n        setShowCommentForm(true); // Show the comment form when \"Add a comment\" is clicked\n        setCurrentCommentID(commentID)\n    };\n    // const handleSubmitComment = async (newComment) => {\n    //     // Handle the new comment submission\n    //     //console.log('New comment submitted:', newComment);\n    \n    //     // Update the model's comments data\n    //     const addComment = {\n    //         content: newComment.commentContent,\n    //         commentIDs: [], // Initialize an empty array for any potential replies\n    //         commentedBy: newComment.username,\n    //         commentedDate: new Date(), // Set the current date\n    //     };\n\n    //     const comment = await createComment(addComment);\n    //     setComments((prevComments) => [...prevComments, newComment]);\n\n\n\n    //     //  // Add the new comment to the comments array\n    //     //  comments.push(addComment);\n    //     //  console.log(addComment)\n    //     //  console.log(comments)\n\n    //        // If it's a reply to an existing comment, update the parent's commentIDs\n    //     if (newComment.parentCommentID) {\n    //         const parentComment = comments.find(comment => comment._id === newComment.parentCommentID);\n    //         if (parentComment) {\n    //             parentComment.commentIDs.push(newComment._id);\n    //             const updatedComment = await updateComment(parentComment._id, parentComment);\n    //             console.log(updatedComment)\n    //             setComments((prevComments) =>\n    //               prevComments.map((comment) =>\n    //                 comment._id === parentComment._id ? parentComment : comment\n    //               ))\n    //         } \n    //     } else {\n    \n    //         post.commentIDs.push(newComment._id);\n    //         const updatedPost = await updatePost(post._id, post);\n    //         console.log(updatedPost)\n    //          // Update the post in context\n    //         setPosts((prevPosts) =>\n    //           prevPosts.map((p) => (p._id === post._id ? post : p))\n    //         );\n    //     }\n\n\n    //     setShowCommentForm(false); // Hide the form after submission\n    // }\n\n    const handleSubmitComment = async (newCommentData) => {\n      // Handle the new comment submission\n      const addComment = {\n          content: newCommentData.commentContent,\n          commentIDs: [], // Initialize an empty array for any potential replies\n          commentedBy: newCommentData.username,\n          commentedDate: new Date(), // Set the current date\n      };\n\n      console.log(\"comment data: \", addComment)\n  \n      const newComment = await createComment(addComment); // Variable with a unique name\n      setComments((prevComments) => [...prevComments, newComment]);\n\n      console.log(\"created comment successfully\", newComment)\n      \n      \n      // If it's a reply to an existing comment, update the parent's commentIDs\n      if (newCommentData.parentCommentID) {\n        console.log(\"parent id: \", newCommentData.parentCommentID)\n        const parentComment = comments.find((comment) => comment._id === newCommentData.parentCommentID);\n        console.log(\"parent comment found: \", parentComment)\n          if (parentComment) {\n              parentComment.commentIDs.push(newComment._id);\n              console.log(\"Updated parentComment: \", parentComment)\n              console.log(\"calling updateComment api: \", parentComment._id, parentComment)\n              const updatedComment = await updateComment(parentComment._id, parentComment);\n              console.log(\"Updated comment: \", updatedComment)\n              setComments((prevComments) =>\n                  prevComments.map((comment) =>\n                      comment._id === parentComment._id ? updatedComment : comment\n                  )\n              );\n          }\n      } else {\n          post.commentIDs.push(newComment._id);\n          console.log(\"New comment id: \", newComment._id)\n          const updatedPost = await updatePost(post._id, post);\n          console.log(\"Updated Post: \", updatedPost)\n          setPosts((prevPosts) =>\n              prevPosts.map((p) => (p._id === post._id ? updatedPost : p))\n          );\n      }\n  \n      setShowCommentForm(false); // Hide the form after submission\n  };\n  \n    \n\n\n    return (\n        <div className=\"postPage\">\n            {!showCommentForm ? (\n                <>\n                <header className=\"postPage-header\">\n                <span className=\"community-name\">{community.name}</span>\n                <span className=\"post-timestamp\"> | {getTimeDifference(post.postedDate.toLocaleString())}</span>\n                <div className=\"posted-by\">{post.postedBy}</div>\n                <h1 className=\"post-title\">{post.title}</h1>\n                {linkFlairData && <div className=\"link-flair\">{linkFlairData.content}</div>}\n                <div className=\"post-content\">{post.content}</div>\n                <div className=\"counts\">\n                    <span className=\"view-count\">Views: {post.views}</span>\n                    <span className=\"comment-count\"> Comments: {calculateCommentCount(post,comments)}</span>\n                </div>\n                </header>\n                <button onClick={() => handleAddCommentClick(null)}>Add a comment</button>\n                <hr />\n                <div className=\"comments-section\">\n                    {displayComments(comments, post.commentIDs)}\n                </div>\n                </>\n            ) : (<CreateComment postID={currentPostID} parentCommentID = {currentCommentID} onSubmit={handleSubmitComment} />)}\n        </div>\n    );\n};\n\nexport default PostPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}