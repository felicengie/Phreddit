{"ast":null,"code":"var _jsxFileName = \"/Users/felice/Documents/project-habibi/client/src/components/NewPostPage/CommunitySelect.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { UsePhredditContext } from '../phredditContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommunitySelect = ({\n  communities = [],\n  onSelect\n}) => {\n  _s();\n  const {\n    user,\n    selectedPost\n  } = UsePhredditContext();\n  const [selectedCommunity, setSelectedCommunity] = useState(\"\");\n  useEffect(() => {\n    if (selectedPost) {\n      // Find the community that contains the selectedPost\n      const communityWithPost = communities.find(community => community.postIDs.includes(selectedPost._id));\n      setSelectedCommunity(communityWithPost ? communityWithPost._id : \"\");\n    }\n  }, [selectedPost, communities]);\n\n  // Sort communities: Communities where the user is a member come first\n  const sortedCommunities = [...communities].sort((a, b) => {\n    const isMemberA = a.members.includes(user.displayName);\n    const isMemberB = b.members.includes(user.displayName);\n    return isMemberB - isMemberA;\n  });\n  const handleChange = value => {\n    setSelectedCommunity(value); // Update local state\n    onSelect(value); // Notify the parent component of the change\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"community-select\",\n      children: [\"Select Community: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"required\",\n        style: {\n          color: 'red'\n        },\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 61\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"community-select\",\n      value: selectedCommunity,\n      onChange: e => handleChange(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"-- Select a Community --\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), sortedCommunities.map(community => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: community._id,\n        children: community.name\n      }, community._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(CommunitySelect, \"4gvK9+SbZ+inpkN4Lez+ZmU0UMo=\");\n_c = CommunitySelect;\nexport default CommunitySelect;\nvar _c;\n$RefreshReg$(_c, \"CommunitySelect\");","map":{"version":3,"names":["React","useState","useEffect","UsePhredditContext","jsxDEV","_jsxDEV","CommunitySelect","communities","onSelect","_s","user","selectedPost","selectedCommunity","setSelectedCommunity","communityWithPost","find","community","postIDs","includes","_id","sortedCommunities","sort","a","b","isMemberA","members","displayName","isMemberB","handleChange","value","children","htmlFor","className","style","color","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","e","target","map","name","_c","$RefreshReg$"],"sources":["/Users/felice/Documents/project-habibi/client/src/components/NewPostPage/CommunitySelect.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { UsePhredditContext } from '../phredditContext';\n\nconst CommunitySelect = ({ communities = [], onSelect }) => {\n    const {user, selectedPost} = UsePhredditContext()\n    const [selectedCommunity, setSelectedCommunity] = useState(\"\");\n\n     useEffect(() => {\n        if (selectedPost) {\n            // Find the community that contains the selectedPost\n            const communityWithPost = communities.find(community =>\n                community.postIDs.includes(selectedPost._id)\n            );\n            setSelectedCommunity(communityWithPost ? communityWithPost._id : \"\");\n        }\n    }, [selectedPost, communities]);\n\n    // Sort communities: Communities where the user is a member come first\n    const sortedCommunities = [...communities].sort((a, b) => {\n        const isMemberA = a.members.includes(user.displayName);\n        const isMemberB = b.members.includes(user.displayName);\n        return isMemberB - isMemberA; \n    });\n\n    const handleChange = (value) => {\n        setSelectedCommunity(value); // Update local state\n        onSelect(value); // Notify the parent component of the change\n    };\n\n    return(\n    <div>\n        <label htmlFor=\"community-select\">Select Community: <span className=\"required\" style={{ color: 'red' }}>*</span></label>\n        <select id=\"community-select\" value= {selectedCommunity} onChange={(e) => handleChange(e.target.value)}>\n            <option value=\"\">-- Select a Community --</option>\n            {sortedCommunities.map(community => (\n                <option key={community._id} value={community._id}>\n                    {community.name}\n                </option>\n            ))}\n        </select>\n    </div>\n)};\n\nexport default CommunitySelect;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}